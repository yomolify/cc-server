{"version":3,"sources":["../source/common.js"],"names":[],"mappings":";;;;;;;;;;;QAIgB,sBAAsB,GAAtB,sBAAsB;QAYtB,iBAAiB,GAAjB,iBAAiB;;oBAhBhB,MAAM;;;;;;;AAIhB,SAAS,sBAAsB,GACtC;AACC,KAAM,cAAc,GACpB;AACC,YAAU,EAAE,EAAE;AACd,QAAM,EAAE,EAAE;EACV,CAAA;;AAED,QAAO,cAAc,CAAA;CACrB;;;;AAGM,SAAS,iBAAiB,CAAC,OAAO,EACzC;;AAEC,KAAI,CAAC,OAAO,CAAC,MAAM,EACnB;AACC,SAAO,CAAC,MAAM,GAAG,EAAE;;AAAA,GAAA;EAEnB;;;AAGD,QAAO,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,IAAI,qBAAqB,CAAA;;;;;;;;AAG5F,oCAAuB,aAAY,OAAO,CAAC,MAAM,CAAC,4GAClD;OADS,UAAU;;AAElB,OAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;;;AAG9C,OAAI,WAAW,CAAC,SAAS,EACzB;AACC,eAAW,CAAC,UAAU,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;IAChD;;;;AAAA,GAID;;;;;;;;;;;;;;;CACD","file":"common.js","sourcesContent":["import path from 'path'\r\n\r\n// returns a stub for webpack-assets.json if it doesn't exist yet\r\n// (because node.js and webpack are being run in parallel in development mode)\r\nexport function default_webpack_assets()\r\n{\r\n\tconst webpack_assets = \r\n\t{\r\n\t\tjavascript: {},\r\n\t\tstyles: {}\r\n\t}\r\n\r\n\treturn webpack_assets\r\n}\r\n\r\n// adds missing fields, etc\r\nexport function normalize_options(options)\r\n{\r\n\t// if no assets specified (for whatever reason), make it an empty array\r\n\tif (!options.assets)\r\n\t{\r\n\t\toptions.assets = {}\r\n\t\t// throw new Error('You must specify \"assets\" parameter')\r\n\t}\r\n\r\n\t// webpack-assets.json path, relative to the project base path\r\n\toptions.webpack_assets_file_path = options.webpack_assets_file_path || 'webpack-assets.json'\t\r\n\r\n\t// generate names (if required) for each user defined asset type, normalize extensions\r\n\tfor (let asset_type of Object.keys(options.assets))\r\n\t{\r\n\t\tconst description = options.assets[asset_type]\r\n\r\n\t\t// normalize extensions\r\n\t\tif (description.extension)\r\n\t\t{\r\n\t\t\tdescription.extensions = [description.extension]\r\n\t\t}\r\n\r\n\t\t// // set asset type name (if required), for readability\r\n\t\t// description.name = description.name || description.extensions.join(', ')\r\n\t}\r\n}"]}