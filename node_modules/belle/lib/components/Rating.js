'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _exenv = require('exenv');

var _utilsHelpers = require('../utils/helpers');

var _styleRatingJs = require('../style/rating.js');

var _styleRatingJs2 = _interopRequireDefault(_styleRatingJs);

var _utilsInjectStyle = require('../utils/inject-style');

var _utilsUnionClassNames = require('../utils/union-class-names');

var _utilsUnionClassNames2 = _interopRequireDefault(_utilsUnionClassNames);

var _configRating = require('../config/rating');

var _configRating2 = _interopRequireDefault(_configRating);

var _utilsAnimationFrameManagement = require('../utils/animation-frame-management');

// Enable React Touch Events
_react2['default'].initializeTouchEvents && _react2['default'].initializeTouchEvents(true);

/**
 * sanitize properties for the wrapping div.
 */
function sanitizeWrapperProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['className', 'onKeyDown', 'onMouseEnter', 'onMouseMove', 'onMouseLeave', 'onMouseUp', 'onMouseDown', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel', 'onBlur', 'onFocus', 'tabIndex', 'aria-label', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-disabled', 'style', 'focusStyle', 'disabledStyle', 'characterStyle', 'activeCharacterStyle', 'hoverCharacterStyle', 'characterProps']);
}

/**
 * sanitize properties for the character span.
 */
function sanitizeCharacterProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['data-belle-value', 'style']);
}

/**
 * Injects pseudo classes for styles into the DOM.
 */
function updatePseudoClassStyle(ratingWrapperStyleId, properties, preventFocusStyleForTouchAndClick) {
  var ratingFocusStyle = undefined;
  if (preventFocusStyleForTouchAndClick) {
    ratingFocusStyle = { outline: 0 };
  } else {
    ratingFocusStyle = (0, _utilsHelpers.extend)({}, _styleRatingJs2['default'].focusStyle, properties.focusStyle);
  }
  var styles = [{
    id: ratingWrapperStyleId,
    style: ratingFocusStyle,
    pseudoClass: 'focus'
  }];
  (0, _utilsInjectStyle.injectStyles)(styles);
}

/**
 * Rating component
 *
 * The component leverages 5 characters (by default stars) to allow the user to
 * to rate.
 */

var Rating = (function (_Component) {
  function Rating(properties) {
    _classCallCheck(this, Rating);

    _get(Object.getPrototypeOf(Rating.prototype), 'constructor', this).call(this, properties);

    var value = undefined;

    if ((0, _utilsHelpers.has)(properties, 'valueLink')) {
      value = properties.valueLink.value;
    } else if ((0, _utilsHelpers.has)(properties, 'value')) {
      value = properties.value;
    } else if ((0, _utilsHelpers.has)(properties, 'defaultValue')) {
      value = properties.defaultValue;
    }

    this.state = {
      value: value,
      focusedValue: undefined,
      generalProps: sanitizeWrapperProps(properties),
      characterProps: sanitizeCharacterProps(properties.characterProps),
      isFocus: false,
      isActive: false
    };

    this.preventFocusStyleForTouchAndClick = (0, _utilsHelpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _configRating2['default'].preventFocusStyleForTouchAndClick;
  }

  _inherits(Rating, _Component);

  _createClass(Rating, [{
    key: 'componentWillMount',

    /**
     * Apply pseudo class styling to the wrapper div.
     */
    value: function componentWillMount() {
      var id = this._reactInternalInstance._rootNodeID.replace(/\./g, '-');
      this.ratingWrapperStyleId = 'rating-wrapper-style-id' + id;
      updatePseudoClassStyle(this.ratingWrapperStyleId, this.props, this.preventFocusStyleForTouchAndClick);

      if (_exenv.canUseDOM) {
        this.mouseUpOnDocumentCallback = this._onMouseUpOnDocument.bind(this);
        document.addEventListener('mouseup', this.mouseUpOnDocumentCallback);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(properties) {
      var newState = {
        wrapperProps: sanitizeWrapperProps(properties),
        characterProps: sanitizeCharacterProps(properties.characterProps)
      };

      if (properties.valueLink) {
        newState.value = properties.valueLink.value;
      } else if (properties.value) {
        newState.value = properties.value;
      }
      this.setState(newState);

      this.preventFocusStyleForTouchAndClick = (0, _utilsHelpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _configRating2['default'].preventFocusStyleForTouchAndClick;

      (0, _utilsInjectStyle.removeStyle)(this.ratingWrapperStyleId);
      updatePseudoClassStyle(this._styleId, properties, this.preventFocusStyleForTouchAndClick);
    }
  }, {
    key: 'componentWillUnmount',

    /**
     * Removes pseudo classes from the DOM once component gets removed.
     */
    value: function componentWillUnmount() {
      (0, _utilsInjectStyle.removeStyle)(this.ratingWrapperStyleId);
      if (_exenv.canUseDOM) {
        document.removeEventListener('mouseup', this.mouseUpOnDocumentCallback);
      }
    }
  }, {
    key: '_onMouseEnter',

    /**
     * As soon as the mouse enters the component the focusedValue is updated based
     * on the value of the targeted span.
     */
    value: function _onMouseEnter(event) {
      // In case the user pressed the mouse and then hovers over the rating and
      // releases the mousUp should no be trigger. Only when the mouseDown starts
      // inside.
      // Activating inside, going out & coming back should still be possible.
      if (!this.state.isActive) {
        this.preventNextMouseUpTriggerUpdate = true;
      }

      if (!this.props.disabled) {
        var value = Number(event.target.getAttribute('data-belle-value'));
        this.setState({
          focusedValue: value,
          isHover: true
        });
      } else {
        this.setState({
          isHover: true
        });
      }
      if (this.props.onMouseEnter) {
        this.props.onMouseEnter(event);
      }
    }
  }, {
    key: '_onMouseMove',

    /**
     * As the mouse moved over the component and enters a new star the focusedValue
     * is updated based on the value of the targeted span.
     */
    value: function _onMouseMove(event) {
      if (!this.props.disabled) {
        var value = Number(event.target.getAttribute('data-belle-value'));
        if (this.state.focusedValue !== value) {
          this.setState({
            focusedValue: value
          });
        }
      }
      if (this.props.onMouseMove) {
        this.props.onMouseMove(event);
      }
    }
  }, {
    key: '_onMouseLeave',

    /**
     * Resets the component as the mouse leaves the hover area.
     */
    value: function _onMouseLeave(event) {
      if (!this.props.disabled) {
        this.setState({
          focusedValue: undefined,
          isHover: false
        });
      } else {
        this.setState({
          isHover: false
        });
      }

      if (this.props.onMouseLeave) {
        this.props.onMouseLeave(event);
      }
    }
  }, {
    key: '_onMouseDown',

    /**
     * Sets isActive state to true.
     */
    value: function _onMouseDown(event) {
      if (!this.props.disabled && event.buttons === 1) {
        this.setState({ isActive: true });
        this.preventNextMouseUpTriggerUpdate = false;
      }

      if (this.props.onMouseDown) {
        this.props.onMouseDown(event);
      }
    }
  }, {
    key: '_onMouseUp',

    /**
     * Sets isActive state to false.
     */
    value: function _onMouseUp(event) {
      if (!this.props.disabled && !this.preventNextMouseUpTriggerUpdate) {
        var value = Number(event.target.getAttribute('data-belle-value'));
        this._updateComponent(value);
      }

      if (this.props.onMouseUp) {
        this.props.onMouseUp(event);
      }
    }
  }, {
    key: '_onMouseUpOnDocument',
    value: function _onMouseUpOnDocument() {
      this.setState({ isActive: false });
    }
  }, {
    key: '_onContextMenu',
    value: function _onContextMenu() {
      this.setState({ isActive: false });
    }
  }, {
    key: '_onTouchStart',

    /**
     * Change focusValue and sets isActive state to true.
     */
    value: function _onTouchStart(event) {
      event.preventDefault();

      if (!this.props.disabled && event.touches.length === 1) {
        var value = Number(event.target.getAttribute('data-belle-value'));
        this.setState({
          focusedValue: value,
          isActive: true
        });
      }
      if (this.props.onTouchStart) {
        this.props.onTouchStart(event);
      }
    }
  }, {
    key: '_updateComponentOnTouchMove',

    /**
     * The function will be passed to requestAnimationFrame for touchMove
     */
    value: function _updateComponentOnTouchMove(touches) {
      var touchedElement = document.elementFromPoint(touches.clientX, touches.clientY);
      var value = Number(touchedElement.getAttribute('data-belle-value'));
      if (value && this.state.focusedValue !== value) {
        this.setState({
          focusedValue: value
        });
      }
    }
  }, {
    key: '_onTouchMove',

    /**
     * set the focusedValue depending on mouse position
     */
    value: function _onTouchMove(event) {
      if (!this.props.disabled && event.touches.length === 1) {
        var touches = event.touches[0];

        // the requestAnimationFrame function must be executed in the context of window
        // see http://stackoverflow.com/a/9678166/837709
        var animationFrame = _utilsAnimationFrameManagement.requestAnimationFrame.call(window, this._updateComponentOnTouchMove.bind(this, touches));

        if (this.previousTouchMoveFrame) {
          // the cancelAnimationFrame function must be executed in the context of window
          // see http://stackoverflow.com/a/9678166/837709
          _utilsAnimationFrameManagement.cancelAnimationFrame.call(window, this.previousTouchMoveFrame);
        }
        this.previousTouchMoveFrame = animationFrame;
      }

      if (this.props.onTouchMove) {
        this.props.onTouchMove(event);
      }
    }
  }, {
    key: '_onTouchEnd',

    /**
     * update the component when touch ends
     */
    value: function _onTouchEnd(event) {
      if (!this.props.disabled) {
        event.preventDefault();
        this.setState({ isActive: false });
        var value = this.state.focusedValue;
        this._updateComponent(value);
      }

      if (this.props.onTouchEnd) {
        this.props.onTouchEnd(event);
      }
    }
  }, {
    key: '_onTouchCancel',

    /**
     * reset the component in case of touch cancel
     */
    value: function _onTouchCancel(event) {
      if (!this.props.disabled) {
        this.setState({
          isActive: false,
          focusedValue: undefined
        });
      }
      if (this.props.onTouchCancel) {
        this.props.onTouchCancel(event);
      }
    }
  }, {
    key: '_onBlur',

    /**
     * reset the component on blur
     */
    value: function _onBlur(event) {
      if (!this.props.disabled) {
        this.setState({
          focusedValue: undefined,
          isFocus: false,
          isActive: false
        });
      }
      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: '_onFocus',

    /**
     * enable focus styling of component when tab is used to focus component
     */
    value: function _onFocus() {
      if (!this.state.isActive && !this.props.disabled) {
        this.setState({ isFocus: true });
      }

      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: '_updateComponent',

    /**
     * update component when component is clicked, touch ends, enter or space key are hit
     * different update logic will apply depending on whether component has property defaultValue, value or valueLink specified
     */
    value: function _updateComponent(value) {
      if ((0, _utilsHelpers.has)(this.props, 'valueLink')) {
        this.props.valueLink.requestChange(value);
        this.setState({
          focusedValue: undefined,
          isActive: false
        });
      } else if ((0, _utilsHelpers.has)(this.props, 'value')) {
        this.setState({
          focusedValue: undefined,
          isActive: false
        });
      } else {
        this.setState({
          focusedValue: undefined,
          isActive: false,
          value: value
        });
      }

      if (this.props.onUpdate) {
        this.props.onUpdate({ value: value });
      }
    }
  }, {
    key: '_onKeyDown',

    /**
     * Manages the keyboard events.
     *
     * In case the Rating Component is in focus Space, ArrowUp will result in increasing the value and arrow down will result in decreasing the value.
     * Enter/ space will result in updating the value of the component.
     *
     * Pressing Escape will reset the value to last value.
     *
     */
    value: function _onKeyDown(event) {
      if (!this.props.disabled) {
        if (event.key === 'ArrowDown' || event.key === 'ArrowLeft') {
          event.preventDefault();
          this._onArrowDownKeyDown();
        } else if (event.key === 'ArrowUp' || event.key === 'ArrowRight') {
          event.preventDefault();
          this._onArrowUpKeyDown();
        } else if (event.key === 'Enter' || event.key === ' ') {
          event.preventDefault();
          this._onEnterSpaceKeyDown();
        } else if (event.key === 'Escape') {
          event.preventDefault();
          this._onEscapeKeyDown();
        }
      }
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: '_onArrowDownKeyDown',

    /**
     * decrease the value by 1 when arrow down key is pressed
     */
    value: function _onArrowDownKeyDown() {
      var newValue = this.state.focusedValue !== undefined ? this.state.focusedValue : this.state.value;
      newValue = newValue > 0 ? newValue - 1 : 0;
      this.setState({
        focusedValue: newValue
      });
    }
  }, {
    key: '_onArrowUpKeyDown',

    /**
     * increase value by 1 when arrow up key is pressed
     */
    value: function _onArrowUpKeyDown() {
      var newValue = this.state.focusedValue !== undefined ? this.state.focusedValue : this.state.value;
      if (!newValue) {
        newValue = 1;
      } else if (newValue < 5) {
        newValue = newValue + 1;
      } else {
        newValue = 5;
      }
      this.setState({
        focusedValue: newValue
      });
    }
  }, {
    key: '_onEnterSpaceKeyDown',

    /**
     * set component value to current focus value
     */
    value: function _onEnterSpaceKeyDown() {
      var newValue = undefined;
      if (this.state.focusedValue !== undefined) {
        if (this.state.focusedValue === 0) {
          newValue = undefined;
        } else {
          newValue = this.state.focusedValue;
        }
        this._updateComponent(newValue);
      }
    }
  }, {
    key: '_onEscapeKeyDown',

    /**
     * reset component when escape key is pressed
     * esc key should just reset the component displayed rating without removing hover or focus styles
     */
    value: function _onEscapeKeyDown() {
      this.setState({
        focusedValue: undefined
      });
    }
  }, {
    key: '_getCurrentValue',

    /**
     * Returns current value of rating to be displayed on the component
     */
    value: function _getCurrentValue() {
      var value = undefined;
      if (this.state.focusedValue !== undefined) {
        value = this.state.focusedValue;
      } else {
        value = this.state.value ? this.state.value : 0;
      }
      return value;
    }
  }, {
    key: 'resetValue',

    /**
     * Reset the value to undefined.
     *
     * This can be used in case you as developer want to reset the rating manually.
     */
    value: function resetValue() {
      /*eslint react/sort-comp:0*/
      this.setState({
        value: undefined,
        focusedValue: undefined
      });
    }
  }, {
    key: 'render',

    /**
     * Returns the HTML function to be rendered by this component.
     */
    value: function render() {
      var _this = this;

      var currentValue = this._getCurrentValue();
      var tabIndex = !this.props.disabled ? this.props.tabIndex : -1;

      var characterStyle = (0, _utilsHelpers.extend)({}, _styleRatingJs2['default'].characterStyle, this.props.characterStyle);

      if (this.state.isActive) {
        characterStyle = (0, _utilsHelpers.extend)({}, characterStyle, _styleRatingJs2['default'].activeCharacterStyle, this.props.activeCharacterStyle);
      } else if (this.state.isHover) {
        characterStyle = (0, _utilsHelpers.extend)({}, characterStyle, _styleRatingJs2['default'].hoverCharacterStyle, this.props.hoverCharacterStyle);
      }

      var wrapperStyle = (0, _utilsHelpers.extend)({}, _styleRatingJs2['default'].style, this.props.style);
      if (this.props.disabled) {
        wrapperStyle = (0, _utilsHelpers.extend)({}, wrapperStyle, _styleRatingJs2['default'].disabledStyle, this.props.disabledStyle);
        if (this.state.isHover) {
          wrapperStyle = (0, _utilsHelpers.extend)(wrapperStyle, _styleRatingJs2['default'].disabledHoverStyle, this.props.disabledHoverStyle);
        }
      } else {
        if (this.state.isFocus && this.preventFocusStyleForTouchAndClick) {
          wrapperStyle = (0, _utilsHelpers.extend)({}, wrapperStyle, _styleRatingJs2['default'].focusStyle, this.props.focusStyle);
        }
        if (this.state.isHover) {
          wrapperStyle = (0, _utilsHelpers.extend)(wrapperStyle, _styleRatingJs2['default'].hoverStyle, this.props.hoverStyle);
        }
      }

      return _react2['default'].createElement(
        'div',
        _extends({ ref: 'wrapper',
          style: wrapperStyle,
          className: (0, _utilsUnionClassNames2['default'])(this.props.className, this.ratingWrapperStyleId),
          onKeyDown: this._onKeyDown.bind(this),
          onMouseEnter: this._onMouseEnter.bind(this),
          onMouseMove: this._onMouseMove.bind(this),
          onMouseLeave: this._onMouseLeave.bind(this),
          onMouseUp: this._onMouseUp.bind(this),
          onMouseDown: this._onMouseDown.bind(this),
          onTouchStart: this._onTouchStart.bind(this),
          onTouchMove: this._onTouchMove.bind(this),
          onTouchEnd: this._onTouchEnd.bind(this),
          onTouchCancel: this._onTouchCancel.bind(this),
          onContextMenu: this._onContextMenu.bind(this),
          onBlur: this._onBlur.bind(this),
          onFocus: this._onFocus.bind(this),
          tabIndex: tabIndex,
          'aria-label': this.props['aria-label'],
          'aria-valuemax': 5,
          'aria-valuemin': 1,
          'aria-valuenow': this.state.value,
          'aria-disabled': this.props.disabled
        }, this.state.wrapperProps),
        _react2['default'].Children.map([1, 2, 3, 4, 5], function (value) {
          var ratingStyle = currentValue >= value ? characterStyle : {};
          return _react2['default'].createElement(
            'span',
            _extends({ 'data-belle-value': value,
              style: ratingStyle
            }, _this.state.characterProps),
            _this.props.character
          );
        })
      );
    }
  }], [{
    key: 'displayName',
    value: 'Belle Rating',
    enumerable: true
  }, {
    key: 'propTypes',
    value: {
      defaultValue: _react2['default'].PropTypes.oneOf([1, 2, 3, 4, 5]),
      value: _react2['default'].PropTypes.oneOf([1, 2, 3, 4, 5]),
      valueLink: _react2['default'].PropTypes.shape({
        value: _react2['default'].PropTypes.oneOf([1, 2, 3, 4, 5]),
        requestChange: _react2['default'].PropTypes.func.isRequired
      }),
      disabled: _react2['default'].PropTypes.bool,
      tabIndex: _react2['default'].PropTypes.number,
      character: _react2['default'].PropTypes.string,
      characterProps: _react2['default'].PropTypes.object,
      preventFocusStyleForTouchAndClick: _react2['default'].PropTypes.bool,
      'aria-label': _react2['default'].PropTypes.string,
      style: _react2['default'].PropTypes.object,
      className: _react2['default'].PropTypes.string,
      focusStyle: _react2['default'].PropTypes.object,
      disabledStyle: _react2['default'].PropTypes.object,
      hoverStyle: _react2['default'].PropTypes.object,
      disabledHoverStyle: _react2['default'].PropTypes.object,
      characterStyle: _react2['default'].PropTypes.object,
      activeCharacterStyle: _react2['default'].PropTypes.object,
      hoverCharacterStyle: _react2['default'].PropTypes.object,
      onUpdate: _react2['default'].PropTypes.func,
      onMouseDown: _react2['default'].PropTypes.func,
      onMouseUp: _react2['default'].PropTypes.func,
      onMouseEnter: _react2['default'].PropTypes.func,
      onMouseMove: _react2['default'].PropTypes.func,
      onMouseLeave: _react2['default'].PropTypes.func,
      onTouchStart: _react2['default'].PropTypes.func,
      onTouchMove: _react2['default'].PropTypes.func,
      onTouchEnd: _react2['default'].PropTypes.func,
      onTouchCancel: _react2['default'].PropTypes.func,
      onFocus: _react2['default'].PropTypes.func,
      onBlur: _react2['default'].PropTypes.func,
      onKeyDown: _react2['default'].PropTypes.func
    },
    enumerable: true
  }, {
    key: 'defaultProps',

    /**
     * Setting default prop values.
     */
    value: {
      disabled: false,
      tabIndex: 0,
      character: '★',
      'aria-label': 'rating'
    },
    enumerable: true
  }]);

  return Rating;
})(_react.Component);

exports['default'] = Rating;
module.exports = exports['default'];