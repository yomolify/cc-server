'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utilsInjectStyle = require('../utils/inject-style');

var _utilsUnionClassNames = require('../utils/union-class-names');

var _utilsUnionClassNames2 = _interopRequireDefault(_utilsUnionClassNames);

var _utilsHelpers = require('../utils/helpers');

var _styleComboBox = require('../style/combo-box');

var _styleComboBox2 = _interopRequireDefault(_styleComboBox);

// Enable React Touch Events
_react2['default'].initializeTouchEvents && _react2['default'].initializeTouchEvents(true);

/**
 * Update hover style for the specified styleId.
 *
 * @param styleId {string} - a unique id that exists as class attribute in the DOM
 * @param caretStyleId {string} - unique is assigned as class to caret span
 * @param properties {object} - the components properties optionally containing hoverStyle
 */
function updatePseudoClassStyle(styleId, caretStyleId, properties) {
  var hoverStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].hoverStyle, properties.hoverStyle);
  var focusStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].focusStyle, properties.focusStyle);
  var disabledHoverStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].disabledHoverStyle, properties.disabledHoverStyle);
  var caretFocusStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].caretFocusStyle);

  var styles = [{
    id: styleId,
    style: hoverStyle,
    pseudoClass: 'hover'
  }, {
    id: styleId,
    style: disabledHoverStyle,
    pseudoClass: 'hover',
    disabled: true
  }, {
    id: styleId,
    style: focusStyle,
    pseudoClass: 'focus'
  }, {
    id: caretStyleId,
    style: caretFocusStyle,
    pseudoClass: 'focus'
  }];
  (0, _utilsInjectStyle.injectStyles)(styles);
}

/**
 * Returns an object with properties that are relevant for the wrapper div.
 */
function sanitizeWrapperProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['style', 'aria-label', 'aria-disabled']);
}

/**
 * Returns an object with properties that are relevant for the input box.
 */
function sanitizeInputProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['ref', 'value', 'valueLink', 'defaultValue', 'placeholder', 'disabled', 'hintStyle', 'className', 'style', 'onUpdate', 'onInputMatch', 'tabIndex', 'onBlur', 'onFocus', 'onKeyDown', 'aria-disabled', 'aria-autocomplete', 'children']);
}

/**
 * Returns an object with properties that are relevant for the wrapping div of
 * the selected option.
 */
function sanitizeCaretProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['style', 'className', 'onClick', 'tabIndex']);
}

/**
 * Returns an object with properties that are relevant for the combo-box menu.
 */
function sanitizeMenuProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['style', 'ref', 'role']);
}

/**
 * Default function used for filtering options.
 */
function filterFunc(inputValue, optionValue) {
  if (inputValue && optionValue) {
    return optionValue.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;
  }
  return false;
}

/**
 * ComboBox React Component.
 */

var ComboBox = (function (_Component) {
  function ComboBox(properties) {
    _classCallCheck(this, ComboBox);

    _get(Object.getPrototypeOf(ComboBox.prototype), 'constructor', this).call(this, properties);
    var inputValue = undefined;

    if ((0, _utilsHelpers.has)(properties, 'valueLink')) {
      inputValue = properties.valueLink.value;
    } else if ((0, _utilsHelpers.has)(properties, 'value')) {
      inputValue = properties.value;
    } else if ((0, _utilsHelpers.has)(properties, 'defaultValue')) {
      inputValue = properties.defaultValue;
    }

    this.state = {
      isOpen: false,
      focusedOptionIndex: undefined,
      inputValue: inputValue,
      wrapperProps: sanitizeWrapperProps(properties.wrapperProps),
      inputProps: sanitizeInputProps(properties),
      caretProps: sanitizeCaretProps(properties.caretProps),
      menuProps: sanitizeMenuProps(properties.menuProps)
    };

    this.filteredOptions = ComboBox.filterOptions(inputValue, properties);
  }

  _inherits(ComboBox, _Component);

  _createClass(ComboBox, [{
    key: '_getHint',

    /**
     * This method will calculate the hint that should be present in comboBox at some point in time. Rules:
     * 1. If menu is not open hint is undefined
     * 2. If menu is open but there are no filteredOptions hint is undefined
     * 3. If if some option is highlighted hint is equal to its value
     * 4. If no option is highlighted but some value is present in input box hint is equal to value of first filteredOptions
     * If user has typed some text in input box and there is a hint(according to above calculations), the starting of hint
     * is replaced by the text input by user ( this is to make sure that case of letters in hint is same as that in input box
     * value and overlap is perfect.)
     * todo: simplify logic in method below
     */
    value: function _getHint() {
      if (this.state.isOpen) {
        var filteredOptions = this.filteredOptions;
        if (filteredOptions && filteredOptions.length > 0) {
          var hint = undefined;
          var focusedOptionIndex = this.state.focusedOptionIndex;
          var inputValue = this.state.inputValue;
          if (focusedOptionIndex >= 0) {
            hint = filteredOptions[focusedOptionIndex].props.value;
          } else if (inputValue && inputValue.length > 0) {
            hint = filteredOptions[0].props.value;
          }
          if (hint) {
            if (inputValue && inputValue.length > 0) {
              var position = hint.toLowerCase().indexOf(inputValue.toLowerCase());
              if (position === 0) {
                return inputValue + hint.substr(inputValue.length, hint.length - inputValue.length);
              } else if (position === -1) {
                return hint;
              }
            } else {
              return hint;
            }
          }
        }
      }
    }
  }, {
    key: 'componentWillMount',

    /**
     * Generates the style-id & inject the focus & hover style.
     * The style-id is based on React's unique DOM node id.
     */
    value: function componentWillMount() {
      var id = this._reactInternalInstance._rootNodeID.replace(/\./g, '-');
      this._styleId = 'style-id' + id;
      this._caretStyleId = 'caretStyle-id' + id;
      updatePseudoClassStyle(this._styleId, this._caretStyleId, this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(properties) {
      var inputValue = undefined;
      if ((0, _utilsHelpers.has)(properties, 'valueLink')) {
        inputValue = properties.valueLink.value;
      } else if ((0, _utilsHelpers.has)(properties, 'value')) {
        inputValue = properties.value;
      } else {
        inputValue = this.state.inputValue;
      }

      var newState = {
        inputValue: inputValue,
        wrapperProps: sanitizeWrapperProps(properties.wrapperProps),
        inputProps: sanitizeInputProps(properties),
        caretProps: sanitizeCaretProps(properties.caretProps),
        menuProps: sanitizeMenuProps(properties.menuProps)
      };

      this.setState(newState);
      this.filteredOptions = ComboBox.filterOptions(inputValue, properties);

      (0, _utilsInjectStyle.removeAllStyles)([this._styleId, this._caretStyleId]);
      updatePseudoClassStyle(this._styleId, this._caretStyleId, properties);
    }
  }, {
    key: 'componentWillUnmount',

    /**
     * Remove a component's associated styles whenever it gets removed from the DOM.
     */
    value: function componentWillUnmount() {
      (0, _utilsInjectStyle.removeAllStyles)([this._styleId, this._caretStyleId]);
    }
  }, {
    key: '_onTouchStartAtOption',

    /**
     * Update focusedOptionIndex when an option is touched.
     */
    value: function _onTouchStartAtOption(event) {
      if (!this.props.disabled && event.touches.length === 1) {
        this._touchStartedAt = Number(event.currentTarget.getAttribute('data-belle-index'));
        this.setState({ focusedOptionIndex: this._touchStartedAt });
      }
    }
  }, {
    key: '_onTouchEndAtOption',

    /**
     * Triggers a change event after the user touched on an Option.
     */
    value: function _onTouchEndAtOption(event) {
      if (!this.props.disabled && this._touchStartedAt) {
        var index = Number(event.currentTarget.getAttribute('data-belle-index'));
        if (this._touchStartedAt === index) {
          event.preventDefault();
          var entry = event.currentTarget.querySelector('[data-belle-value]');
          var value = entry.getAttribute('data-belle-value');
          this._triggerChange(value);
        }
        this._touchStartedAt = undefined;
      }
    }
  }, {
    key: '_onTouchCancelAtOption',

    /**
     * Update focusedOptionIndex to undefined on touch cancel.
     */
    value: function _onTouchCancelAtOption() {
      if (!this.props.disabled) {
        this._touchStartedAt = undefined;
        this.setState({ focusedOptionIndex: undefined });
      }
    }
  }, {
    key: '_onBlur',

    /**
     * Closed opened combo-box options and removed focusStyles on blur.
     */
    value: function _onBlur(event) {
      if (!this.props.disabled) {
        this.setState({
          isOpen: false,
          focusedOptionIndex: undefined
        });
      }

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: '_onFocus',

    /**
     * Set focused state when element is focused.
     */
    value: function _onFocus(event) {
      if (!this.props.disabled) {
        this.setState({
          isOpen: true
        });
      }

      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: '_onCaretClick',

    /**
     * Open/ Close menu when create is clicked.
     */
    value: function _onCaretClick() {
      if (!this.props.disabled) {
        var isOpen = !this.state.isOpen;
        this.setState({
          isOpen: isOpen
        });
      }
    }
  }, {
    key: '_onMouseEnterAtOption',

    /**
     * Update focusedOptionIndex for component when mouse enters an option.
     */
    value: function _onMouseEnterAtOption(event) {
      if (!this.props.disabled) {
        var index = Number(event.currentTarget.getAttribute('data-belle-index'));
        this.setState({
          focusedOptionIndex: index
        });
      }
    }
  }, {
    key: '_onMouseLeaveAtOption',

    /**
     * Set focusedOptionIndex to undefined.
     */
    value: function _onMouseLeaveAtOption() {
      if (!this.props.disabled) {
        this.setState({
          focusedOptionIndex: undefined
        });
      }
    }
  }, {
    key: '_onClickAtOption',

    /**
     * Update component value when an option is clicked.
     */
    value: function _onClickAtOption(event) {
      if (!this.props.disabled) {
        var entry = event.currentTarget.querySelector('[data-belle-value]');
        this._triggerChange(entry.getAttribute('data-belle-value'));
      }
    }
  }, {
    key: '_onKeyDown',

    /**
     * Handle keyDown in input (when input is focused):
     * 1. ComboBox is closed and ArrowDown/ ArrowUp is pressed -> open the ComboBox
     * 2. ComboBox is opened and ArrowDown is pressed -> highlight next option
     * 3. ComboBox is opened and ArrowUp is pressed -> highlight previous option
     * 4. ComboBox is opened and ArrowRight is pressed -> value of hint is copied over to inputBox
     * 5. ComboBox is opened and Enter/ Tab is pressed -> update input value to value of option
     * 6. ComboBox is opened and Esc is pressed -> close ComboBox
     */
    value: function _onKeyDown(event) {
      if (!this.props.disabled) {
        if (!this.state.isOpen) {
          if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
            event.preventDefault();
            this.setState({
              isOpen: true
            });
          }
        } else {
          if (event.key === 'ArrowDown') {
            event.preventDefault();
            this._onArrowDownKeyDown();
          } else if (event.key === 'ArrowUp') {
            event.preventDefault();
            this._onArrowUpKeyDown();
          } else if (event.key === 'ArrowRight') {
            if (this.props.enableHint) {
              event.preventDefault();
              var hint = this._getHint();
              if (hint) {
                this._userUpdateValue(hint);
              }
            }
          } else if (event.key === 'Enter') {
            event.preventDefault();
            this._onEnterOrTabKeyDown();
          } else if (event.key === 'Tab') {
            // event.preventDefault(); should not be called here else tab
            // will not be able to take user to next component on the page
            this._onEnterOrTabKeyDown();
          } else if (event.key === 'Escape') {
            event.preventDefault();
            this.setState({
              isOpen: false,
              focusedOptionIndex: undefined
            });
          }
        }
      }

      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: '_onArrowDownKeyDown',

    /**
     * Highlight next option when arrowDown key is pressed.
     * Highlight first option if currently last option is focused.
     */
    value: function _onArrowDownKeyDown() {
      var index = 0;
      if (this.state.focusedOptionIndex !== undefined && this.state.focusedOptionIndex + 1 < this.filteredOptions.length) {
        index = this.state.focusedOptionIndex + 1;
      }
      this.setState({
        focusedOptionIndex: index
      });
    }
  }, {
    key: '_onArrowUpKeyDown',

    /**
     * Highlight previous option when arrowUp key is pressed.
     * Highlight last option if currently first option is focused.
     */
    value: function _onArrowUpKeyDown() {
      if (this.filteredOptions.length > 0) {
        var index = this.filteredOptions.length - 1;
        if (this.state.focusedOptionIndex) {
          index = this.state.focusedOptionIndex - 1;
        }
        this.setState({
          focusedOptionIndex: index
        });
      }
    }
  }, {
    key: '_onEnterOrTabKeyDown',

    /**
     * Update value of Input box to the value of highlighted option.
     */
    value: function _onEnterOrTabKeyDown() {
      if (this.state.focusedOptionIndex >= 0) {
        this._triggerChange(this.filteredOptions[this.state.focusedOptionIndex].props.value);
      }
    }
  }, {
    key: '_findMatch',

    /**
     * The function will return options (if any) who's value is same as value of the combo-box input.
     */
    value: function _findMatch(value) {
      return (0, _utilsHelpers.find)(this.filteredOptions, function (entry) {
        return entry.props.value === value;
      });
    }
  }, {
    key: '_triggerChange',

    /**
     * The function is called when user selects an option. Function will do following:
     * 1. Close the options
     * 2. Change value of input depending on whether its has value, defaultValue or valueLink property
     * 3. Call onUpdate props function
     */
    value: function _triggerChange(value) {
      if ((0, _utilsHelpers.has)(this.props, 'valueLink')) {
        this.props.valueLink.requestChange(value);
        this.setState({
          isOpen: false,
          focusedOptionIndex: undefined
        });
      } else if ((0, _utilsHelpers.has)(this.props, 'value')) {
        this.setState({
          isOpen: false,
          focusedOptionIndex: undefined
        });
      } else {
        this.setState({
          inputValue: value,
          isOpen: false,
          focusedOptionIndex: undefined
        });
        this.filteredOptions = ComboBox.filterOptions(value, this.props);
      }

      var obj = { value: value, isOptionSelection: true, isMatchingOption: true };
      var matchedOption = this._findMatch(value);
      obj.identifier = matchedOption ? matchedOption.props.identifier : undefined;

      if (this.props.onUpdate) {
        this.props.onUpdate(obj);
      }
    }
  }, {
    key: '_onChange',

    /**
     * The function is called when user type/ paste value in the input box.
     */
    value: function _onChange(event) {
      var value = event.target.value;
      this._userUpdateValue(value);
    }
  }, {
    key: '_userUpdateValue',

    /**
     * The function is called when user inputs a value in the input box. This can be done by:
     * 1. typing/ pasting value into input box
     * 2. pressing arrowRight key when there is some hint in the input box
     *
     * Function will do following:
     * 1. Open the options
     * 2. Change value of input depending on whether its has value, defaultValue or valueLink property
     * 3. Call onUpdate props function
     */
    value: function _userUpdateValue(value) {
      if ((0, _utilsHelpers.has)(this.props, 'valueLink')) {
        this.props.valueLink.requestChange(value);
        this.setState({
          isOpen: true,
          focusedOptionIndex: undefined
        });
      } else if ((0, _utilsHelpers.has)(this.props, 'value')) {
        this.setState({
          isOpen: true,
          focusedOptionIndex: undefined
        });
      } else {
        this.setState({
          inputValue: value,
          isOpen: true,
          focusedOptionIndex: undefined
        });
        this.filteredOptions = ComboBox.filterOptions(value, this.props);
      }

      var obj = { value: value, isOptionSelection: false, isMatchingOption: false };

      var matchedOption = this._findMatch(value);
      if (matchedOption) {
        obj.identifier = matchedOption.props.identifier;
        obj.isMatchingOption = true;
      }

      if (this.props.onUpdate) {
        this.props.onUpdate(obj);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      var inputStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].style, this.props.style);
      var hintStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].hintStyle, this.props.hintStyle);
      var wrapperStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].wrapperStyle, this.props.wrapperStyle);
      var menuStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].menuStyle, this.props.menuStyle);

      var hint = this.props.enableHint ? this._getHint() : undefined;
      var placeHolder = !hint ? this.props.placeholder : undefined;
      var inputClassName = (0, _utilsUnionClassNames2['default'])(this.props.className, this._styleId);
      var tabIndex = this.props.tabIndex ? this.props.tabIndex : '0';

      if (this.props.disabled) {
        inputStyle = (0, _utilsHelpers.extend)(inputStyle, _styleComboBox2['default'].disabledStyle, this.props.disabledStyle);
      }

      // todo: Currently there are no different hover styles for caret, like select they are probably not really needed.
      var caretStyle = undefined;
      if (this.props.displayCaret) {
        if (this.props.disabled) {
          caretStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].caretToOpenStyle, this.props.caretToOpenStyle, _styleComboBox2['default'].disabledCaretToOpenStyle, this.props.disabledCaretToOpenStyle);
        } else if (this.state.isOpen) {
          caretStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].caretToCloseStyle, this.props.caretToCloseStyle);
        } else {
          caretStyle = (0, _utilsHelpers.extend)({}, _styleComboBox2['default'].caretToOpenStyle, this.props.caretToOpenStyle);
        }
      }

      var computedMenuStyle = this.state.isOpen && !this.props.disabled && this.filteredOptions && this.filteredOptions.length > 0 ? menuStyle : { display: 'none' };

      // using value for input makes it a controlled component and it will be changed in controlled manner if (1) user enters value, (2) user selects some option
      // value will be updated depending on whether user has passed value / valueLink / defaultValue as property
      return _react2['default'].createElement(
        'div',
        _extends({ style: wrapperStyle,
          'aria-label': this.props['aria-label'],
          'aria-disabled': this.props.disabled
        }, this.state.wrapperProps),
        _react2['default'].createElement('input', { style: hintStyle,
          value: hint,
          tabIndex: -1,
          readOnly: true }),
        _react2['default'].createElement('input', _extends({ disabled: this.props.disabled,
          'aria-disabled': this.props.disabled,
          value: this.state.inputValue,
          placeholder: placeHolder,
          style: inputStyle,
          className: inputClassName,
          onChange: this._onChange.bind(this),
          tabIndex: tabIndex,
          onBlur: this._onBlur.bind(this),
          onFocus: this._onFocus.bind(this),
          onKeyDown: this._onKeyDown.bind(this),
          'aria-autocomplete': 'list'
        }, this.state.inputProps)),
        _react2['default'].createElement('span', _extends({ style: caretStyle,
          className: this._caretStyleId,
          onClick: this._onCaretClick.bind(this),
          tabIndex: -1
        }, this.state.caretProps)),
        _react2['default'].createElement(
          'ul',
          _extends({ style: computedMenuStyle,
            role: 'listbox',
            'aria-expanded': this.state.isOpen
          }, this.state.menuProps),
          _react2['default'].Children.map(this.filteredOptions, function (entry, index) {
            var isHovered = _this.state.focusedOptionIndex === index;
            var option = _react2['default'].cloneElement(entry, {
              _isHovered: isHovered
            });

            return _react2['default'].createElement(
              'li',
              { key: index,
                'data-belle-index': index,
                onTouchStart: _this._onTouchStartAtOption.bind(_this),
                onTouchEnd: _this._onTouchEndAtOption.bind(_this),
                onTouchCancel: _this._onTouchCancelAtOption.bind(_this),
                onClick: _this._onClickAtOption.bind(_this),
                onMouseEnter: _this._onMouseEnterAtOption.bind(_this),
                onMouseLeave: _this._onMouseLeaveAtOption.bind(_this),
                onMouseDown: function (event) {
                  event.preventDefault();
                },
                role: 'option' },
              option
            );
          })
        )
      );
    }
  }], [{
    key: 'filterOptions',

    /**
     * Function to filter options using input value.
     */
    value: function filterOptions(inputValue, properties) {
      /*eslint react/sort-comp:0*/
      var filteredOptions = [];
      if (!(0, _utilsHelpers.isEmpty)(properties.children)) {
        if (inputValue) {
          filteredOptions = (0, _utilsHelpers.filterReactChildren)(properties.children, function (entry) {
            return properties.filterFunc(inputValue, entry.props.value);
          });
        } else {
          filteredOptions = (0, _utilsHelpers.getArrayForReactChildren)(properties.children, function (entry) {
            return entry;
          });
        }
        if (properties.maxOptions) {
          filteredOptions = filteredOptions.splice(0, properties.maxOptions);
        }
      }
      return filteredOptions;
    }
  }, {
    key: 'displayName',
    value: 'Belle ComboBox',
    enumerable: true
  }, {
    key: 'propTypes',
    value: {
      children: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.array, _react2['default'].PropTypes.object]),
      defaultValue: _react2['default'].PropTypes.string,
      value: _react2['default'].PropTypes.string,
      valueLink: _react2['default'].PropTypes.shape({
        value: _react2['default'].PropTypes.string,
        requestChange: _react2['default'].PropTypes.func.isRequired
      }),
      placeholder: _react2['default'].PropTypes.string,
      disabled: _react2['default'].PropTypes.bool,
      wrapperProps: _react2['default'].PropTypes.object,
      menuProps: _react2['default'].PropTypes.object,
      caretProps: _react2['default'].PropTypes.object,
      onUpdate: _react2['default'].PropTypes.func,
      onInputMatch: _react2['default'].PropTypes.func,
      tabIndex: _react2['default'].PropTypes.number,
      onKeyDown: _react2['default'].PropTypes.func,
      onFocus: _react2['default'].PropTypes.func,
      onBlur: _react2['default'].PropTypes.func,
      className: _react2['default'].PropTypes.string,
      caretClassName: _react2['default'].PropTypes.string,
      style: _react2['default'].PropTypes.object,
      wrapperStyle: _react2['default'].PropTypes.object,
      hintStyle: _react2['default'].PropTypes.object,
      menuStyle: _react2['default'].PropTypes.object,
      focusStyle: _react2['default'].PropTypes.object,
      disabledStyle: _react2['default'].PropTypes.object,
      disabledHoverStyle: _react2['default'].PropTypes.object,
      hoverStyle: _react2['default'].PropTypes.object,
      caretToOpenStyle: _react2['default'].PropTypes.object,
      caretToCloseStyle: _react2['default'].PropTypes.object,
      disabledCaretToOpenStyle: _react2['default'].PropTypes.object,
      maxOptions: _react2['default'].PropTypes.number,
      displayCaret: _react2['default'].PropTypes.bool,
      enableHint: _react2['default'].PropTypes.bool,
      filterFunc: _react2['default'].PropTypes.func,
      'aria-label': _react2['default'].PropTypes.string
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      disabled: false,
      displayCaret: false,
      enableHint: false,
      'aria-label': 'ComboBox',
      filterFunc: filterFunc,
      tabIndex: 0,
      children: []
    },
    enumerable: true
  }]);

  return ComboBox;
})(_react.Component);

exports['default'] = ComboBox;
module.exports = exports['default'];