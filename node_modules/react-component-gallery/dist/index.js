// Generated by CoffeeScript 1.9.2
var PropTypes, React, assign, calculateLayout, componentWidthMixin;

React = require('react');

PropTypes = React.PropTypes;

componentWidthMixin = require('react-component-width-mixin');

assign = require('object-assign');

calculateLayout = require('./calculate_layout');

module.exports = React.createClass({
  displayName: "ComponentGallery",
  mixins: [componentWidthMixin],
  propTypes: {
    children: PropTypes.any.isRequired,
    disableServerRender: PropTypes.bool,
    margin: PropTypes.number,
    noMarginBottomOnLastRow: PropTypes.bool,
    marginBottom: PropTypes.number,
    targetWidth: PropTypes.number,
    widthHeightRatio: PropTypes.number,
    galleryStyle: PropTypes.object,
    componentStyle: PropTypes.object
  },
  getDefaultProps: function() {
    return {
      margin: 10,
      noMarginBottomOnLastRow: false,
      targetWidth: 200,
      widthHeightRatio: 1,
      disableServerRender: false,
      galleryStyle: {},
      componentStyle: {}
    };
  },
  render: function() {
    var componentWidth, componentsPerRow, ref;
    if (this.state.componentWidth === 0) {
      return React.createElement("div", null);
    } else if (this.props.disableServerRender) {
      return React.createElement("div", null);
    } else {
      ref = calculateLayout(this.props, this.state), componentWidth = ref[0], componentsPerRow = ref[1];
      return React.createElement("div", {
        "className": "component-gallery " + this.props.className,
        "style": assign({}, {
          overflow: "hidden"
        }, this.props.galleryStyle)
      }, React.Children.map(this.props.children, (function(_this) {
        return function(child, i) {
          var marginBottom, marginRight, numRows;
          marginBottom = _this.props.margin;
          if (_this.props.noMarginBottomOnLastRow) {
            numRows = Math.ceil(React.Children.count(_this.props.children) / componentsPerRow);
            if ((i + 1) > ((numRows - 1) * componentsPerRow)) {
              marginBottom = 0;
            }
          }
          if (_this.props.marginBottom && marginBottom !== 0) {
            marginBottom = _this.props.marginBottom;
          }
          if (componentsPerRow === 1) {
            marginRight = 0;
          } else if (i !== 0 && (i + 1) % componentsPerRow === 0) {
            marginRight = 0;
          } else {
            marginRight = _this.props.margin;
          }
          return React.DOM.div({
            className: "component-wrapper",
            style: assign({}, {
              width: componentWidth + "px",
              height: (componentWidth * _this.props.widthHeightRatio) + "px",
              display: "inline-block",
              marginRight: marginRight + "px",
              marginBottom: marginBottom + "px",
              overflow: "hidden",
              position: "relative",
              verticalAlign: "top"
            }, _this.props.componentStyle)
          }, child);
        };
      })(this)));
    }
  }
});
