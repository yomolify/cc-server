{"version":3,"sources":["../../source/plugin/write assets.js"],"names":[],"mappings":"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","file":"write assets.js","sourcesContent":["import fs     from 'fs'\r\nimport path   from 'path'\r\nimport mkdirp from 'mkdirp'\r\n\r\nimport { clone } from '../helpers'\r\n\r\n// writes webpack-assets.json file, which contains assets' file paths\r\nexport default function write_assets(json, options, log)\r\n{\r\n\t// take the passed in options\r\n\toptions = clone(options)\r\n\r\n\t// make webpack stats accessible for asset functions (parser, naming, filter)\r\n\toptions.webpack_stats = json\r\n\r\n\tlog.debug('running write assets webpack plugin')\r\n\r\n\tconst development = options.development\r\n\r\n\tif (development)\r\n\t{\r\n\t\tlog.debug(' (development mode is on)')\r\n\t}\r\n\r\n\t// create all the folders in the path if they don't exist\r\n\tmkdirp.sync(path.dirname(options.webpack_assets_path))\r\n\r\n\t// in debug mode, write webpack stats json for debugging purpose\r\n\tif (options.debug)\r\n\t{\r\n\t\tconst webpack_stats_file_path = path.resolve(path.dirname(options.webpack_assets_path), 'webpack-stats.debug.json')\r\n\r\n\t\t// write webpack stats file\r\n\t\tlog.debug(`writing webpack stats to ${webpack_stats_file_path}`)\r\n\t\t// write the file (format the JSON for readability)\r\n\t\tfs.writeFileSync(webpack_stats_file_path, JSON.stringify(json, null, 2))\r\n\t}\r\n\r\n\t// the output object with assets\r\n\tconst output = options.output\r\n\r\n\t// populate the output object with assets\r\n\tpopulate_assets(output, json, options, log)\r\n\r\n\t// write webpack assets info file\r\n\tlog.debug(`writing webpack assets info to ${options.webpack_assets_path}`)\r\n\t// format the JSON for readability if in debug mode\r\n\tconst assets_info = development ? JSON.stringify(output, null, 2) : JSON.stringify(output)\r\n\t// write the file\r\n\tfs.writeFileSync(options.webpack_assets_path, assets_info)\r\n}\r\n\r\n// populates the output object with assets\r\nfunction populate_assets(output, json, options, log)\r\n{\r\n\t// for each chunk name (\"main\", \"common\", ...)\r\n\tObject.keys(json.assetsByChunkName).forEach(function(name)\r\n\t{\r\n\t\tlog.debug(`getting javascript and styles for chunk \"${name}\"`)\r\n\r\n\t\t// get javascript chunk real file path\r\n\r\n\t\tconst javascript = get_assets(name, 'js')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (javascript)\r\n\t\t{\r\n\t\t\tlog.debug(` (got javascript)`)\r\n\t\t\toutput.javascript[name] = javascript\r\n\t\t}\r\n\r\n\t\t// get style chunk real file path\r\n\r\n\t\tconst style = get_assets(name, 'css')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (style)\r\n\t\t{\r\n\t\t\tlog.debug(` (got style)`)\r\n\t\t\toutput.styles[name] = style\r\n\t\t}\r\n\t})\r\n\r\n\t// gets asset paths by name and extension of their chunk\r\n\tfunction get_assets(name, extension = 'js')\r\n\t{\r\n\t\tlet chunk = json.assetsByChunkName[name]\r\n\t\r\n\t\t// a chunk could be a string or an array, so make sure it is an array\r\n\t\tif (!(Array.isArray(chunk)))\r\n\t\t{\r\n\t\t\tchunk = [chunk]\r\n\t\t}\r\n\t\r\n\t\treturn chunk\r\n\t\t\t// filter by extension\r\n\t\t\t.filter(name => path.extname(name) === `.${extension}`)\r\n\t\t\t// adjust the real path (can be http, filesystem)\r\n\t\t\t.map(name => options.assets_base_path + name)\r\n\t}\r\n\r\n\t// // output assets for all application javascript entry points\r\n\t// Object.keys(this.options.entry).forEach(chunk_name =>\r\n\t// {\r\n\t// \tlet entry = this.options.entry[chunk_name]\r\n\t// \tif (Array.isArray(entry))\r\n\t// \t{\r\n\t// \t\tentry = entry[entry.length - 1]\r\n\t// \t}\r\n\t//\r\n\t// \toutput.javascript[entry] = get_assets(chunk_name, 'js')[0]\r\n\t// \t// the second asset is usually a source map\r\n\t// })\r\n\r\n\t// // omit node_modules contents and internal webpack modules\r\n\t// const modules = json.modules.filter(module =>\r\n\t// {\r\n\t// \treturn module.name.indexOf('.') === 0 && module.name.indexOf('./~/') !== 0\r\n\t// \t// return module.name.indexOf('./~/') !== 0 && module.name.indexOf('(webpack)') !== 0\r\n\t// })\r\n\r\n\t// one can supply a custom filter\r\n\tconst default_filter = (module, regular_expression) => regular_expression.test(module.name)\r\n\t// one can supply a custom namer\r\n\tconst default_naming = (module) => module.name\r\n\r\n\t// for each user specified asset type\r\n\tfor (let asset_type of Object.keys(options.assets))\r\n\t{\r\n\t\tconst asset_description = options.assets[asset_type]\r\n\r\n\t\t// one can supply his own filter\r\n\t\tconst filter = (asset_description.filter || default_filter) //.bind(this)\r\n\t\t// one can supply his own parser\r\n\t\tconst parser = asset_description.parser //.bind(this)\r\n\t\t// one can supply his own namer\r\n\t\tconst naming = (asset_description.naming || default_naming) //.bind(this)\r\n\r\n\t\t// parser is required\r\n\t\tif (!asset_description.parser)\r\n\t\t{\r\n\t\t\tthrow new Error(`\"parser\" function is required for assets type \"${asset_type}\". See the Configuration section of the README for explanation.`)\r\n\t\t}\r\n\r\n\t\tlog.debug(`populating assets of type \"${asset_type}\"`)\r\n\r\n\t\t// timer start\r\n\t\tconst began_at = new Date().getTime()\r\n\r\n\t\t// initialization\r\n\t\toutput[asset_type] = output[asset_type] || {}\r\n\r\n\t\t// get real paths for all the files from this asset type\r\n\t\tjson.modules\r\n\t\t\t// take just modules of this asset type\r\n\t\t\t.filter(module => filter(module, options.regular_expressions[asset_type], options, log))\r\n\t\t\t.reduce((set, module) =>\r\n\t\t\t{\r\n\t\t\t\t// determine asset name\r\n\t\t\t\tconst name = naming(module, options, log)\r\n\t\t\t\t// determine and set the real file path for the asset\r\n\t\t\t\tset[name] = parser(module, options, log) // || ''\r\n\t\t\t\t// continue\r\n\t\t\t\treturn set\r\n\t\t\t},\r\n\t\t\toutput[asset_type])\r\n\r\n\t\t// timer stop\r\n\t\tlog.debug(` time taken: ${new Date().getTime() - began_at} ms`)\r\n\t}\r\n}"]}