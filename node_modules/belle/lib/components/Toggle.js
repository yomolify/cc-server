'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utilsInjectStyle = require('../utils/inject-style');

var _utilsHelpers = require('../utils/helpers');

var _styleToggle = require('../style/toggle');

var _styleToggle2 = _interopRequireDefault(_styleToggle);

var _configToggle = require('../config/toggle');

var _configToggle2 = _interopRequireDefault(_configToggle);

var _utilsIsComponentOfTypeJs = require('../utils/is-component-of-type.js');

var _utilsIsComponentOfTypeJs2 = _interopRequireDefault(_utilsIsComponentOfTypeJs);

var _utilsAnimationFrameManagement = require('../utils/animation-frame-management');

var _utilsUnionClassNames = require('../utils/union-class-names');

var _utilsUnionClassNames2 = _interopRequireDefault(_utilsUnionClassNames);

// Enable React Touch Events
_react2['default'].initializeTouchEvents && _react2['default'].initializeTouchEvents(true);

function sanitizeChildProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['className', 'defaultValue', 'firstChoiceProps', 'focusStyle', 'handleProps', 'onFocus', 'onBlur', 'onUpdate', 'onMouseDown', 'onMouseLeave', 'onMouseUp', 'onTouchStart', 'secondChoiceProps', 'sliderProps', 'sliderWrapperProps', 'style', 'tabIndex', 'value']);
}

function sanitizeSliderProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['style', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel']);
}

function sanitizeSliderWrapperProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['ref', 'style']);
}

function sanitizeChoiceProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['ref', 'style']);
}

function sanitizeHandleProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['onMouseDown', 'onMouseMove', 'onMouseUp', 'onMouseLeave', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel', 'ref', 'style']);
}

/**
 * Verifies that the provided property is a Choice from Belle.
 */
function choicePropType(props, propName, componentName) {
  if (!(props[propName] && (0, _utilsIsComponentOfTypeJs2['default'])('Belle Choice', props[propName]))) {
    return new Error('Invalid children supplied to `' + componentName + '`, expected a Choice component from Belle.');
  }
}

/**
 * Verifies that the children is an array containing only two choices with a
 * different value.
 */
function validateChoices(props, propName, componentName) {
  var error = _react2['default'].PropTypes.arrayOf(choicePropType)(props, propName, componentName);
  if (error) return error;

  if (props.children && props.children.length !== 2) {
    return new Error('Invalid children supplied to `' + componentName + '`, expected exactly two Choice components.');
  }
  if (props.children && (0, _utilsHelpers.first)(props.children).props.value === (0, _utilsHelpers.last)(props.children).props.value) {
    return new Error('Invalid children supplied to `' + componentName + '`, expected different value properties for the provided Choice components.');
  }
}

/**
 * Update focus style for the speficied styleId.
 *
 * @param styleId {string} - a unique id that exists as class attribute in the DOM
 * @param properties {object} - the components properties optionally containing custom styles
 */
function updatePseudoClassStyle(styleId, properties, preventFocusStyleForTouchAndClick) {
  var focusStyle = undefined;
  if (preventFocusStyleForTouchAndClick) {
    focusStyle = { outline: 0 };
  } else {
    focusStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].focusStyle, properties.focusStyle);
  }

  var styles = [{
    id: styleId,
    style: focusStyle,
    pseudoClass: 'focus'
  }];

  (0, _utilsInjectStyle.injectStyles)(styles);
}

/**
 * Toggle component
 */

var Toggle = (function (_Component) {
  function Toggle(properties) {
    _classCallCheck(this, Toggle);

    _get(Object.getPrototypeOf(Toggle.prototype), 'constructor', this).call(this, properties);

    var value = undefined;
    if ((0, _utilsHelpers.has)(properties, 'valueLink')) {
      value = properties.valueLink.value;
    } else if ((0, _utilsHelpers.has)(properties, 'value')) {
      value = properties.value;
    } else if ((0, _utilsHelpers.has)(properties, 'defaultValue')) {
      value = properties.defaultValue;
    } else {
      value = false;
    }

    this.state = {
      firstChoiceProps: sanitizeChoiceProps(properties.firstChoiceProps),
      childProps: sanitizeChildProps(properties),
      secondChoiceProps: sanitizeChoiceProps(properties.secondChoiceProps),
      handleProps: sanitizeHandleProps(properties.handleProps),
      isActive: false,
      isDraggingWithMouse: false,
      isDraggingWithTouch: false,
      sliderProps: sanitizeSliderProps(properties.sliderProps),
      sliderWrapperProps: sanitizeSliderWrapperProps(properties.sliderWrapperProps),
      value: value,
      wasFocusedWithClickOrTouch: false
    };

    this._touchStartedAtSlider = false;
    this._touchEndedNotInSlider = false;

    this._preventTouchSwitch = false;

    this._mouseDragStart = undefined;
    this._mouseDragEnd = undefined;
    this._preventMouseSwitch = false;

    // The isFocused attribute is used to apply the one-time focus animation.
    // As it is reset after every render it can't be set inside state as this
    // would trigger an endless loop.
    this.isFocused = false;

    this.preventFocusStyleForTouchAndClick = (0, _utilsHelpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _configToggle2['default'].preventFocusStyleForTouchAndClick;
  }

  _inherits(Toggle, _Component);

  _createClass(Toggle, [{
    key: 'componentWillMount',

    /**
     * Generates the style-id & inject the focus style.
     *
     * The style-id is based on React's unique DOM node id.
     */
    value: function componentWillMount() {
      var id = this._reactInternalInstance._rootNodeID.replace(/\./g, '-');
      this.styleId = 'style-id' + id;
      updatePseudoClassStyle(this.styleId, this.props, this.preventFocusStyleForTouchAndClick);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(properties) {
      var newState = {
        firstChoiceProps: sanitizeChoiceProps(properties.firstChoiceProps),
        childProps: sanitizeChildProps(properties),
        secondChoiceProps: sanitizeChoiceProps(properties.secondChoiceProps),
        handleProps: sanitizeHandleProps(properties.handleProps),
        sliderProps: sanitizeSliderProps(properties.sliderProps),
        sliderWrapperProps: sanitizeSliderWrapperProps(properties.sliderWrapperProps)
      };

      if ((0, _utilsHelpers.has)(properties, 'valueLink')) {
        newState.value = properties.valueLink.value;
      } else if ((0, _utilsHelpers.has)(properties, 'value')) {
        newState.value = properties.value;
      }
      this.setState(newState);

      this.preventFocusStyleForTouchAndClick = (0, _utilsHelpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _configToggle2['default'].preventFocusStyleForTouchAndClick;

      (0, _utilsInjectStyle.removeStyle)(this.styleId);
      updatePseudoClassStyle(this.styleId, properties, this.preventFocusStyleForTouchAndClick);
    }
  }, {
    key: 'componentDidUpdate',

    /**
     * Deactivate the focused attribute in order to make sure the focus animation
     * only runs once when the component is focused on & not after re-rendering
     * e.g when the user clicks on the toggle.
     */
    value: function componentDidUpdate() {
      this.isFocused = false;
    }
  }, {
    key: 'componentWillUnmount',

    /**
     * Remove a component's associated styles whenever it gets removed from the DOM.
     */
    value: function componentWillUnmount() {
      (0, _utilsInjectStyle.removeStyle)(this.styleId);
    }
  }, {
    key: '_onFocus',

    /**
     * Activate the focused attribute used to determine when to show the
     * one-time focus animation and trigger a render.
     */
    value: function _onFocus(event) {
      if (!this.props.disabled) {
        this.isFocused = true;
        this.forceUpdate();
      }

      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: '_onBlur',

    /**
     * Deactivate the focused attribute used to determine when to show the
     * one-time focus animation and trigger a render.
     */
    value: function _onBlur(event) {
      this.isFocused = false;
      this.setState({ wasFocusedWithClickOrTouch: false });

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: '_onMouseDownOnWrapper',
    value: function _onMouseDownOnWrapper(event) {
      if (!this.props.disabled) {
        this.setState({ wasFocusedWithClickOrTouch: true, isActive: true });
      }
      if (this.props.onMouseDown) {
        this.props.onMouseDown(event);
      }
    }
  }, {
    key: '_onMouseUpOnWrapper',
    value: function _onMouseUpOnWrapper(event) {
      if (!this.props.disabled) {
        this.setState({ isActive: false });
      }
      if (this.props.onMouseUp) {
        this.props.onMouseUp(event);
      }
    }
  }, {
    key: '_onTouchStartOnWrapper',
    value: function _onTouchStartOnWrapper(event) {
      if (!this.props.disabled) {
        this.setState({ wasFocusedWithClickOrTouch: true });
      }
      if (this.props.onTouchStart) {
        this.props.onTouchStart(event);
      }
    }
  }, {
    key: '_onClickAtSlider',
    value: function _onClickAtSlider(event) {
      if (!this.props.disabled) {
        this._triggerChange(!this.state.value);
      }
      if (this.props.sliderProps && this.props.sliderProps.onClick) {
        this.props.sliderProps.onClick(event);
      }
    }
  }, {
    key: '_onMouseDownOnHandle',
    value: function _onMouseDownOnHandle(event) {
      // check for left mouse button pressed
      if (event.button === 0 && !this.props.disabled) {
        var defaultSliderOffset = this._getSliderOffset();
        this._mouseDragStart = event.pageX - (this.state.value ? defaultSliderOffset : 0);
        this._preventMouseSwitch = false;

        this.setState({
          isDraggingWithMouse: true,
          sliderOffset: this.state.value ? defaultSliderOffset : 0
        });
      }

      if (this.props.handleProps && this.props.handleProps.onMouseDown) {
        this.props.handleProps.onMouseDown(event);
      }
    }
  }, {
    key: '_onMouseMoveOnHandle',
    value: function _onMouseMoveOnHandle(event) {
      if (this.state.isDraggingWithMouse && !this.props.disabled) {
        // the requestAnimationFrame function must be executed in the context of window
        // see http://stackoverflow.com/a/9678166/837709
        var animationFrame = _utilsAnimationFrameManagement.requestAnimationFrame.call(window, this._triggerUpdateComponentOnMouseMove.bind(this, event.pageX));

        if (this.previousMouseMoveFrame) {
          // the cancelAnimationFrame function must be executed in the context of window
          // see http://stackoverflow.com/a/9678166/837709
          _utilsAnimationFrameManagement.cancelAnimationFrame.call(window, this.previousMouseMoveFrame);
        }
        this.previousMouseMoveFrame = animationFrame;
      }

      if (this.props.handleProps && this.props.handleProps.onMouseMove) {
        this.props.handleProps.onMouseMove(event);
      }
    }
  }, {
    key: '_onMouseUpOnHandle',
    value: function _onMouseUpOnHandle(event) {
      if (!this.props.disabled) {
        if (this._mouseDragEnd) {
          if (!this._preventMouseSwitch) {
            this._triggerChange(!this.state.value);
          } else if (this._preventMouseSwitch) {
            var value = this._mouseDragEnd > this._getHandleWidth() / 2;
            this._triggerChange(value);
          }
        } else {
          this._triggerChange(!this.state.value);
        }
      }

      this._mouseDragStart = undefined;
      this._mouseDragEnd = undefined;
      this._preventMouseSwitch = false;

      if (this.props.handleProps && this.props.handleProps.onMouseUp) {
        this.props.handleProps.onMouseUp(event);
      }
    }
  }, {
    key: '_onMouseLeaveOnHandle',
    value: function _onMouseLeaveOnHandle(event) {
      if (!this.props.disabled) {
        if (this._mouseDragStart && !this._preventMouseSwitch) {
          this._triggerChange(!this.state.value);
        } else if (this._mouseDragStart && this._preventMouseSwitch) {
          var value = this._mouseDragEnd > this._getHandleWidth() / 2;
          this._triggerChange(value);
        } else {
          this.setState({ isActive: false });
        }
      }

      this._mouseDragStart = undefined;
      this._mouseDragEnd = undefined;
      this._preventMouseSwitch = false;

      if (this.props.handleProps && this.props.handleProps.onMouseLeave) {
        this.props.handleProps.onMouseLeave(event);
      }
    }
  }, {
    key: '_onTouchStartAtSlider',
    value: function _onTouchStartAtSlider(event) {
      if (event.touches.length === 1 && !this.props.disabled) {
        this._touchStartedAtSlider = true;
        this.setState({
          isActive: true
        });
      }

      if (this.props.sliderProps && this.props.sliderProps.onTouchStart) {
        this.props.sliderProps.onTouchStart(event);
      }
    }
  }, {
    key: '_onTouchMoveAtSlider',
    value: function _onTouchMoveAtSlider(event) {
      if (event.touches.length === 1 && this._touchStartedAtSlider && !this.props.disabled) {
        // the requestAnimationFrame function must be executed in the context of window
        // see http://stackoverflow.com/a/9678166/837709
        var animationFrame = _utilsAnimationFrameManagement.requestAnimationFrame.call(window, this._triggerUpdateComponentOnTouchMoveAtSlider.bind(this, event.touches[0]));

        if (this.previousTouchMoveAtSliderFrame) {
          // the cancelAnimationFrame function must be executed in the context of window
          // see http://stackoverflow.com/a/9678166/837709
          _utilsAnimationFrameManagement.cancelAnimationFrame.call(window, this.previousTouchMoveAtSliderFrame);
        }
        this.previousTouchMoveAtSliderFrame = animationFrame;
      }

      if (this.props.sliderProps && this.props.sliderProps.onTouchMove) {
        this.props.sliderProps.onTouchMove(event);
      }
    }
  }, {
    key: '_onTouchEndAtSlider',
    value: function _onTouchEndAtSlider(event) {
      // prevent the onClick to happen
      event.preventDefault();

      if (this._touchStartedAtSlider && !this._touchEndedNotInSlider && !this.props.disabled) {
        this.setState({
          isActive: false
        });
        this._triggerChange(!this.state.value);
      } else {
        this.setState({ isActive: false });
      }
      this._touchStartedAtSlider = false;
      this._touchEndedNotInSlider = false;

      if (this.props.sliderProps && this.props.sliderProps.onTouchEnd) {
        this.props.sliderProps.onTouchEnd(event);
      }
    }
  }, {
    key: '_onTouchCancelAtSlider',
    value: function _onTouchCancelAtSlider(event) {
      this.setState({ isActive: false });
      this._touchStartedAtSlider = false;
      this._touchEndedNotInSlider = false;

      if (this.props.sliderProps && this.props.sliderProps.onTouchCancel) {
        this.props.sliderProps.onTouchCancel(event);
      }
    }
  }, {
    key: '_onTouchStartHandle',
    value: function _onTouchStartHandle(event) {
      event.preventDefault();

      // check for one touch as multiple could be browser gestures and only one
      // is relevant for us
      if (event.touches.length === 1 && !this.props.disabled) {
        this._preventTouchSwitch = false;

        var defaultSliderOffset = this._getSliderOffset();
        this.setState({
          isDraggingWithTouch: true,
          sliderOffset: this.state.value ? defaultSliderOffset : 0
        });

        this._touchDragStart = event.touches[0].pageX - (this.state.value ? defaultSliderOffset : 0);
      }

      if (this.props.handleProps && this.props.handleProps.onTouchStart) {
        this.props.handleProps.onTouchStart(event);
      }
    }
  }, {
    key: '_onTouchMoveHandle',
    value: function _onTouchMoveHandle(event) {
      if (event.touches.length === 1 && this.state.isDraggingWithTouch && !this.props.disabled) {
        // the requestAnimationFrame function must be executed in the context of window
        // see http://stackoverflow.com/a/9678166/837709
        var animationFrame = _utilsAnimationFrameManagement.requestAnimationFrame.call(window, this._triggerUpdateComponentOnTouchMoveAtHandle.bind(this, event.touches[0]));

        if (this.previousTouchMoveAtHandleFrame) {
          // the cancelAnimationFrame function must be executed in the context of window
          // see http://stackoverflow.com/a/9678166/837709
          _utilsAnimationFrameManagement.cancelAnimationFrame.call(window, this.previousTouchMoveAtHandleFrame);
        }
        this.previousTouchMoveAtHandleFrame = animationFrame;
      }

      if (this.props.handleProps && this.props.handleProps.onTouchMove) {
        this.props.handleProps.onTouchMove(event);
      }
    }
  }, {
    key: '_onTouchEndHandle',
    value: function _onTouchEndHandle(event) {
      // prevent the onClick to happen
      event.preventDefault();

      if (this.state.isDraggingWithTouch && !this.props.disabled) {
        // no click & move was involved
        if (this._touchDragEnd) {
          if (this._preventTouchSwitch) {
            var value = this._touchDragEnd > this._getHandleWidth() / 2;
            this._triggerChange(value);
          } else {
            this._triggerChange(!this.state.value);
          }
        } else {
          // click like
          this._triggerChange(!this.state.value);
        }
      } else {
        this.setState({
          isActive: false,
          isDraggingWithTouch: false
        });
      }

      this._touchDragStart = undefined;
      this._touchDragEnd = undefined;
      this._preventTouchSwitch = false;

      if (this.props.handleProps && this.props.handleProps.onTouchEnd) {
        this.props.handleProps.onTouchEnd(event);
      }
    }
  }, {
    key: '_onTouchCancelHandle',
    value: function _onTouchCancelHandle(event) {
      this.setState({
        isDraggingWithTouch: false
      });
      this._touchDragStart = undefined;
      this._touchDragEnd = undefined;
      this._preventTouchSwitch = false;

      if (this.props.handleProps && this.props.handleProps.onTouchCancel) {
        this.props.handleProps.onTouchCancel(event);
      }
    }
  }, {
    key: '_onKeyDown',
    value: function _onKeyDown(event) {
      if (!this.props.disabled) {
        if (event.key === 'ArrowLeft') {
          event.preventDefault();
          this._onArrowLeftKeyDown();
        } else if (event.key === 'ArrowRight') {
          event.preventDefault();
          this._onArrowRightKeyDown();
        } else if (event.key === 'Enter' || event.key === ' ') {
          event.preventDefault();
          this._onEnterOrSpaceKeyDown();
        }
      }
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: '_onArrowLeftKeyDown',

    /**
     * Flip value in case it is false.
     */
    value: function _onArrowLeftKeyDown() {
      if (this.state.value === true) {
        this._triggerChange(false);
      }
    }
  }, {
    key: '_onArrowRightKeyDown',

    /**
     * Flip value in case it is true.
     */
    value: function _onArrowRightKeyDown() {
      if (this.state.value === false) {
        this._triggerChange(true);
      }
    }
  }, {
    key: '_onEnterOrSpaceKeyDown',

    /**
     * Flip value and trigger change.
     */
    value: function _onEnterOrSpaceKeyDown() {
      this._triggerChange(!this.state.value);
    }
  }, {
    key: '_onMouseEnterAtSliderWrapper',
    value: function _onMouseEnterAtSliderWrapper() {
      this.setState({
        isHovered: true
      });
      if (this.props.onMouseEnter) {
        this.props.onMouseEnter(event);
      }
    }
  }, {
    key: '_onMouseLeaveAtSliderWrapper',
    value: function _onMouseLeaveAtSliderWrapper() {
      this.setState({
        isHovered: false,
        isActive: false
      });
      if (this.props.onMouseLeave) {
        this.props.onMouseLeave(event);
      }
    }
  }, {
    key: '_getHandleHeight',
    value: function _getHandleHeight() {
      return (0, _utilsHelpers.has)(this.props.handleStyle, 'height') ? this.props.handleStyle.height : _styleToggle2['default'].handleStyle.height;
    }
  }, {
    key: '_getHandleWidth',
    value: function _getHandleWidth() {
      return (0, _utilsHelpers.has)(this.props.handleStyle, 'width') ? this.props.handleStyle.width : _styleToggle2['default'].handleStyle.width;
    }
  }, {
    key: '_getSliderOffset',
    value: function _getSliderOffset() {
      var firstChoiceWidth = (0, _utilsHelpers.has)(this.props.firstChoiceStyle, 'width') ? this.props.firstChoiceStyle.width : _styleToggle2['default'].firstChoiceStyle.width;

      return firstChoiceWidth - this._getHandleWidth() / 2;
    }
  }, {
    key: '_getToggleWidth',
    value: function _getToggleWidth() {
      return (0, _utilsHelpers.has)(this.props.style, 'width') ? this.props.style.width : _styleToggle2['default'].style.width;
    }
  }, {
    key: '_triggerChange',
    value: function _triggerChange(value) {
      if ((0, _utilsHelpers.has)(this.props, 'valueLink')) {
        this.props.valueLink.requestChange(value);
        this.setState({
          isDraggingWithMouse: false,
          isDraggingWithTouch: false,
          isActive: false
        });
      } else if ((0, _utilsHelpers.has)(this.props, 'value')) {
        this.setState({
          isDraggingWithMouse: false,
          isDraggingWithTouch: false,
          isActive: false
        });
      } else {
        this.setState({
          value: value,
          isDraggingWithMouse: false,
          isDraggingWithTouch: false,
          isActive: false
        });
      }

      if (this.props.onUpdate) {
        this.props.onUpdate({ value: value });
      }
    }
  }, {
    key: '_triggerUpdateComponentOnMouseMove',
    value: function _triggerUpdateComponentOnMouseMove(pageX) {
      var difference = pageX - this._mouseDragStart;

      if (this.state.value && this._mouseDragEnd && difference > this._mouseDragEnd) {
        this._preventMouseSwitch = true;
      } else if (!this.state.value && this._mouseDragEnd && difference < this._mouseDragEnd) {
        this._preventMouseSwitch = true;
      }

      this._mouseDragEnd = difference;

      if (difference < 0 || difference > this._getToggleWidth() - this._getHandleWidth()) return;

      this.setState({
        sliderOffset: difference
      });
    }
  }, {
    key: '_triggerUpdateComponentOnTouchMoveAtSlider',
    value: function _triggerUpdateComponentOnTouchMoveAtSlider(touch) {
      var touchedElement = document.elementFromPoint(touch.clientX, touch.clientY);
      var firstChoiceNode = _react2['default'].findDOMNode(this.refs.firstChoice);
      var secondChoiceNode = _react2['default'].findDOMNode(this.refs.secondChoice);

      this._touchEndedNotInSlider = touchedElement !== firstChoiceNode && touchedElement !== secondChoiceNode;
      if (this.state.isActive && this._touchEndedNotInSlider) {
        this.setState({ isActive: false });
      } else if (!this.state.isActive && !this._touchEndedNotInSlider) {
        this.setState({ isActive: true });
      }
    }
  }, {
    key: '_triggerUpdateComponentOnTouchMoveAtHandle',
    value: function _triggerUpdateComponentOnTouchMoveAtHandle(touch) {
      var sliderWrapperNode = _react2['default'].findDOMNode(this.refs.sliderWrapper);
      var rect = sliderWrapperNode.getBoundingClientRect();
      var difference = touch.pageX - this._touchDragStart;
      var horizontalTolerance = this._getHandleWidth() * 2;
      var verticalTolerance = this._getHandleHeight() * 2;

      // touch left the allowed handle drag area
      if (touch.clientX < rect.left - horizontalTolerance || touch.clientX > rect.right + horizontalTolerance || touch.clientY < rect.top - verticalTolerance || touch.clientY > rect.bottom + verticalTolerance) {
        if (this._preventTouchSwitch) {
          var value = difference > this._getHandleWidth() / 2;
          this._triggerChange(value);
        } else {
          this._triggerChange(!this.state.value);
        }
      } else if (this.state.isDraggingWithTouch) {
        // is still dragging
        if (this.state.value && this._touchDragEnd && difference > this._touchDragEnd) {
          this._preventTouchSwitch = true;
        } else if (!this.state.value && this._touchDragEnd && difference < this._touchDragEnd) {
          this._preventTouchSwitch = true;
        }

        if (difference < 0 || difference > this._getToggleWidth() - this._getHandleWidth()) return;

        this._touchDragEnd = difference;
        this.setState({
          sliderOffset: difference
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var wrapperStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].style, this.props.style);

      if (this.isFocused && !this.state.wasFocusedWithClickOrTouch) {
        wrapperStyle = (0, _utilsHelpers.extend)({}, wrapperStyle, _styleToggle2['default'].focusStyle, this.props.focusStyle);
      }

      var computedSliderStyle = undefined;
      var handleStyle = undefined;

      var sliderWrapperStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].sliderWrapperStyle, this.props.sliderWrapperStyle);
      var defaultSliderOffset = this._getSliderOffset();

      if (this.state.isDraggingWithMouse || this.state.isDraggingWithTouch) {
        computedSliderStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].sliderStyle, this.props.sliderStyle, {
          left: this.state.sliderOffset - defaultSliderOffset,
          transition: 'none'
        });
        // right now even when handle is clicked, it momentarily shows this grabbing styles
        // may be this.state.isDraggingWithMouse should be set to true only after mouse movement starts
        var activeStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].activeHandleStyle, this.props.handleStyle);
        handleStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].handleStyle, activeStyle, this.props.activeHandleStyle, {
          left: this.state.sliderOffset,
          transition: activeStyle.transition ? activeStyle.transition : 'none'
        });
      } else {
        handleStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].handleStyle, this.props.handleStyle);
        computedSliderStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].sliderStyle, {
          left: this.state.value ? 0 : -defaultSliderOffset
        });

        if (this.state.isActive) {
          handleStyle = (0, _utilsHelpers.extend)({}, handleStyle, _styleToggle2['default'].activeHandleStyle, this.props.activeHandleStyle);
        } else if (this.state.isHovered) {
          handleStyle = (0, _utilsHelpers.extend)({}, handleStyle, _styleToggle2['default'].hoverHandleStyle, this.props.hoverHandleStyle);
        }

        var position = {
          left: this.state.value ? defaultSliderOffset : 0
        };
        handleStyle = (0, _utilsHelpers.extend)({}, handleStyle, position);
      }

      var computedTrueChoice = (0, _utilsHelpers.first)(this.props.children) ? (0, _utilsHelpers.first)(this.props.children) : '✓';
      var computedFalseChoice = (0, _utilsHelpers.last)(this.props.children) ? (0, _utilsHelpers.last)(this.props.children) : '✘';

      var computedTrueChoiceStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].firstChoiceStyle, this.props.firstChoiceStyle);
      var computedFalseChoiceStyle = (0, _utilsHelpers.extend)({}, _styleToggle2['default'].secondChoiceStyle, this.props.secondChoiceStyle);

      var hasCustomTabIndex = this.props.wrapperProps && this.props.wrapperProps.tabIndex;
      var tabIndex = hasCustomTabIndex ? this.props.wrapperProps.tabIndex : '0';
      if (this.props.disabled) {
        tabIndex = -1;
        wrapperStyle = (0, _utilsHelpers.extend)({}, wrapperStyle, _styleToggle2['default'].disabledStyle, this.props.disabledStyle);
        handleStyle = (0, _utilsHelpers.extend)({}, handleStyle, _styleToggle2['default'].disabledHandleStyle, this.props.disabledHandleStyle);
      }

      var role = (0, _utilsHelpers.has)(this.state.childProps, 'role') ? this.state.childProps.role : 'checkbox';

      return _react2['default'].createElement(
        'div',
        _extends({ style: wrapperStyle,
          tabIndex: tabIndex,
          className: (0, _utilsUnionClassNames2['default'])(this.props.className, this.styleId),
          onKeyDown: this._onKeyDown.bind(this),
          onMouseDown: this._onMouseDownOnWrapper.bind(this),
          onMouseUp: this._onMouseUpOnWrapper.bind(this),
          onTouchStart: this._onTouchStartOnWrapper.bind(this),
          onFocus: this._onFocus.bind(this),
          onBlur: this._onBlur.bind(this),
          onMouseEnter: this._onMouseEnterAtSliderWrapper.bind(this),
          onMouseLeave: this._onMouseLeaveAtSliderWrapper.bind(this),
          role: role,
          'aria-checked': this.state.value
        }, this.state.childProps),
        _react2['default'].createElement(
          'div',
          _extends({ style: sliderWrapperStyle,
            ref: 'sliderWrapper'
          }, this.state.sliderWrapperProps),
          _react2['default'].createElement(
            'div',
            _extends({ style: computedSliderStyle,
              onClick: this._onClickAtSlider.bind(this),
              onTouchStart: this._onTouchStartAtSlider.bind(this),
              onTouchMove: this._onTouchMoveAtSlider.bind(this),
              onTouchEnd: this._onTouchEndAtSlider.bind(this),
              onTouchCancel: this._onTouchCancelAtSlider.bind(this)
            }, this.state.sliderProps),
            _react2['default'].createElement(
              'div',
              _extends({ ref: 'firstChoice',
                style: computedTrueChoiceStyle
              }, this.state.firstChoiceProps),
              computedTrueChoice
            ),
            _react2['default'].createElement(
              'div',
              _extends({ ref: 'secondChoice',
                style: computedFalseChoiceStyle
              }, this.state.secondChoiceProps),
              computedFalseChoice
            )
          )
        ),
        _react2['default'].createElement('div', _extends({ ref: 'handle',
          style: handleStyle,
          onMouseDown: this._onMouseDownOnHandle.bind(this),
          onMouseMove: this._onMouseMoveOnHandle.bind(this),
          onMouseUp: this._onMouseUpOnHandle.bind(this),
          onMouseLeave: this._onMouseLeaveOnHandle.bind(this),
          onTouchStart: this._onTouchStartHandle.bind(this),
          onTouchMove: this._onTouchMoveHandle.bind(this),
          onTouchEnd: this._onTouchEndHandle.bind(this),
          onTouchCancel: this._onTouchCancelHandle.bind(this)
        }, this.state.handleProps))
      );
    }
  }], [{
    key: 'displayName',
    value: 'Belle Toggle',
    enumerable: true
  }, {
    key: 'propTypes',
    value: {
      activeHandleStyle: _react2['default'].PropTypes.object,
      children: validateChoices,
      className: _react2['default'].PropTypes.string,
      defaultValue: _react2['default'].PropTypes.bool,
      disabled: _react2['default'].PropTypes.bool,
      disabledHandleStyle: _react2['default'].PropTypes.object,
      disabledStyle: _react2['default'].PropTypes.object,
      firstChoiceProps: _react2['default'].PropTypes.object,
      firstChoiceStyle: _react2['default'].PropTypes.shape({
        width: _react2['default'].PropTypes.number
      }),
      focusStyle: _react2['default'].PropTypes.object,
      handleProps: _react2['default'].PropTypes.shape({
        onMouseDown: _react2['default'].PropTypes.func,
        onMouseMove: _react2['default'].PropTypes.func,
        onMouseUp: _react2['default'].PropTypes.func,
        onMouseLeave: _react2['default'].PropTypes.func,
        onTouchStart: _react2['default'].PropTypes.func,
        onTouchMove: _react2['default'].PropTypes.func,
        onTouchEnd: _react2['default'].PropTypes.func,
        onTouchCancel: _react2['default'].PropTypes.func
      }),
      handleStyle: _react2['default'].PropTypes.shape({
        height: _react2['default'].PropTypes.number,
        width: _react2['default'].PropTypes.number
      }),
      hoverHandleStyle: _react2['default'].PropTypes.object,
      onBlur: _react2['default'].PropTypes.func,
      onUpdate: _react2['default'].PropTypes.func,
      onFocus: _react2['default'].PropTypes.func,
      onKeyDown: _react2['default'].PropTypes.func,
      onMouseDown: _react2['default'].PropTypes.func,
      onMouseEnter: _react2['default'].PropTypes.func,
      onMouseLeave: _react2['default'].PropTypes.func,
      onMouseUp: _react2['default'].PropTypes.func,
      onTouchStart: _react2['default'].PropTypes.func,
      secondChoiceProps: _react2['default'].PropTypes.object,
      secondChoiceStyle: _react2['default'].PropTypes.shape({
        width: _react2['default'].PropTypes.number
      }),
      sliderProps: _react2['default'].PropTypes.shape({
        onClick: _react2['default'].PropTypes.func,
        onTouchStart: _react2['default'].PropTypes.func,
        onTouchMove: _react2['default'].PropTypes.func,
        onTouchEnd: _react2['default'].PropTypes.func,
        onTouchCancel: _react2['default'].PropTypes.func
      }),
      sliderStyle: _react2['default'].PropTypes.object,
      sliderWrapperProps: _react2['default'].PropTypes.object,
      sliderWrapperStyle: _react2['default'].PropTypes.object,
      style: _react2['default'].PropTypes.shape({
        width: _react2['default'].PropTypes.number
      }),
      value: _react2['default'].PropTypes.bool,
      valueLink: _react2['default'].PropTypes.shape({
        value: _react2['default'].PropTypes.bool.isRequired,
        requestChange: _react2['default'].PropTypes.func.isRequired
      }),
      wrapperProps: _react2['default'].PropTypes.object
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      disabled: false
    },
    enumerable: true
  }]);

  return Toggle;
})(_react.Component);

exports['default'] = Toggle;
module.exports = exports['default'];