'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var ProgressBar = (function (_React$Component) {
    _inherits(ProgressBar, _React$Component);

    function ProgressBar() {
        _classCallCheck(this, ProgressBar);

        _React$Component.apply(this, arguments);
    }

    ProgressBar.prototype.componentDidMount = function componentDidMount() {
        // Can't use the mdlUpgrade component because we need access to the Material internal object
        componentHandler.upgradeElement(_react2['default'].findDOMNode(this));
        this.setProgress(this.props.progress);
        this.setBuffer(this.props.buffer);
    };

    ProgressBar.prototype.componentDidUpdate = function componentDidUpdate() {
        this.setProgress(this.props.progress);
        this.setBuffer(this.props.buffer);
    };

    ProgressBar.prototype.componentWillUnmount = function componentWillUnmount() {
        componentHandler.downgradeElements(_react2['default'].findDOMNode(this));
    };

    ProgressBar.prototype.setProgress = function setProgress(progress) {
        if (!this.props.indeterminate && progress !== undefined) {
            _react2['default'].findDOMNode(this).MaterialProgress.setProgress(progress);
        }
    };

    ProgressBar.prototype.setBuffer = function setBuffer(buffer) {
        if (buffer !== undefined) {
            _react2['default'].findDOMNode(this).MaterialProgress.setBuffer(buffer);
        }
    };

    ProgressBar.prototype.render = function render() {
        var _props = this.props;
        var buffer = _props.buffer;
        var className = _props.className;
        var indeterminate = _props.indeterminate;
        var progress = _props.progress;

        var otherProps = _objectWithoutProperties(_props, ['buffer', 'className', 'indeterminate', 'progress']);

        var classes = _classnames2['default']('mdl-progress mdl-js-progress', {
            'mdl-progress__indeterminate': indeterminate
        }, className);

        return _react2['default'].createElement('div', _extends({ className: classes }, otherProps));
    };

    _createClass(ProgressBar, null, [{
        key: 'propTypes',
        value: {
            buffer: _react.PropTypes.number,
            className: _react.PropTypes.string,
            indeterminate: _react.PropTypes.bool,
            progress: _react.PropTypes.number
        },
        enumerable: true
    }]);

    return ProgressBar;
})(_react2['default'].Component);

exports['default'] = ProgressBar;
module.exports = exports['default'];