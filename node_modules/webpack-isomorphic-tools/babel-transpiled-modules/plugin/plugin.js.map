{"version":3,"sources":["../../source/plugin/plugin.js"],"names":[],"mappings":"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","file":"plugin.js","sourcesContent":["import path from 'path'\r\n\r\nimport write_assets  from './write assets'\r\nimport notify_stats  from './notify stats'\r\n\r\nimport Log from './../tools/log'\r\n\r\nimport { exists, clone, alias_camel_case } from './../helpers'\r\n\r\nimport { default_webpack_assets, normalize_options } from './../common'\r\n\r\n// a Webpack plugin\r\nexport default function Plugin(options)\r\n{\r\n\t// take the passed in options\r\n\tthis.options = alias_camel_case(clone(options))\r\n\r\n\t// add missing fields, etc\r\n\tnormalize_options(this.options)\r\n\r\n\t// logging\r\n\tthis.log = new Log('webpack-isomorphic-tools/plugin', { debug: this.options.debug })\r\n\r\n\t// assets regular expressions (based on extensions).\r\n\t// will be used in loaders and in write_assets\r\n\tthis.regular_expressions = {}\r\n\r\n\t// alias camel case for those who prefer it\r\n\tthis.regularExpressions = this.regular_expressions\r\n\r\n\t// for each user defined asset type\r\n\tfor (let asset_type of Object.keys(this.options.assets))\r\n\t{\r\n\t\tconst description = this.options.assets[asset_type]\r\n\r\n\t\t// create a regular expression for this file extension (or these file extensions)\r\n\t\tthis.regular_expressions[asset_type] = Plugin.regular_expression(description.extensions)\r\n\t}\r\n}\r\n\r\n// creates a regular expression for this file extension (or these file extensions)\r\nPlugin.prototype.regular_expression = function(asset_type)\r\n{\r\n\treturn this.regular_expressions[asset_type]\r\n}\r\n\r\n// creates a regular expression for this file extension (or these file extensions)\r\nPlugin.regular_expression = function(extensions)\r\n{\r\n\tlet matcher\r\n\tif (extensions.length > 1)\r\n\t{\r\n\t\tmatcher = `(${extensions.join('|')})`\r\n\t}\r\n\telse\r\n\t{\r\n\t\tmatcher = extensions\r\n\t}\r\n\r\n\treturn new RegExp(`\\\\.${matcher}$`)\r\n}\r\n\r\n// sets development mode flag to whatever was passed (or true if nothing was passed)\r\n// (development mode allows asset hot reloading when used with webpack-dev-server)\r\nPlugin.prototype.development = function(flag)\r\n{\r\n\t// set development mode flag\r\n\tthis.options.development = exists(flag) ? flag : true\r\n\r\n\tif (this.options.development)\r\n\t{\r\n\t\tthis.log.debug('entering development mode')\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthis.log.debug('entering production mode')\r\n\t}\r\n\r\n\t// allows method chaining\r\n\treturn this\r\n}\r\n\r\n// applies the plugin to the Webpack build\r\nPlugin.prototype.apply = function(compiler)\r\n{\r\n\t// selfie\r\n\tconst plugin = this\r\n\r\n\t// Webpack configuration\r\n\tconst webpack_configuration = compiler.options\r\n\r\n\t// validate webpack configuration\r\n\tif (!webpack_configuration.context)\r\n\t{\r\n\t\tthrow new Error('You must specify \".context\" in your webpack configuration')\r\n\t}\r\n\r\n\t// project base path, required to output webpack-assets.json\r\n\tplugin.options.project_path = webpack_configuration.context\r\n\r\n\t// resolve webpack-assets.json file path\r\n\tconst webpack_assets_path = path.resolve(plugin.options.project_path, plugin.options.webpack_assets_file_path)\r\n\r\n\t// validate webpack configuration\r\n\tif (!webpack_configuration.output)\r\n\t{\r\n\t\tthrow new Error('You must specify \".output\" section in your webpack configuration')\r\n\t}\r\n\t\r\n\t// validate webpack configuration\r\n\tif (!webpack_configuration.output.publicPath)\r\n\t{\r\n\t\tthrow new Error('You must specify \".output.publicPath\" in your webpack configuration')\r\n\t}\r\n\r\n\t// assets base path (on disk or on the network)\r\n\tconst assets_base_path = webpack_configuration.output.publicPath\r\n\r\n\t// when all is done\r\n\t// https://github.com/webpack/docs/wiki/plugins\r\n\tcompiler.plugin('done', function(stats)\r\n\t{\r\n\t\tvar json = stats.toJson()\r\n\r\n\t\t// output some info to the console if in developmetn mode\r\n\t\tif (plugin.options.development)\r\n\t\t{\r\n\t\t\t// outputs stats info to the console\r\n\t\t\t// (only needed in development mode)\r\n\t\t\tnotify_stats(stats, json)\r\n\t\t}\r\n\r\n\t\t// write webpack-assets.json with assets info\r\n\t\twrite_assets(json,\r\n\t\t{ \r\n\t\t\tdevelopment         : plugin.options.development,\r\n\t\t\tdebug               : plugin.options.debug,\r\n\t\t\tassets              : plugin.options.assets,\r\n\t\t\tassets_base_path    : assets_base_path,\r\n\t\t\twebpack_assets_path : webpack_assets_path,\r\n\t\t\toutput              : default_webpack_assets(),\r\n\t\t\tregular_expressions : plugin.regular_expressions\r\n\t\t},\r\n\t\tplugin.log)\r\n\t})\r\n}\r\n\r\n// a sample path parser for webpack url-loader\r\n// (works for images, fonts, and i guess for everything else, should work for any file type)\r\nPlugin.url_loader_parser = function(module, options)\r\n{\r\n\t// retain everything inside of double quotes.\r\n\t// usually it's \"data:image...\" for embedded with the double quotes\r\n\t// or __webpack_public_path__ + \"...\" for filesystem path\r\n\tconst double_qoute_index = module.source.indexOf('\"')\r\n\tlet asset_path = module.source.slice(double_qoute_index + 1, -1)\r\n\r\n\t// check if the file was embedded (small enough)\r\n\tconst is_embedded = asset_path.lastIndexOf('data:image', 0) === 0\r\n\tif (!is_embedded)\r\n\t{\r\n\t\t// if it wasn't embedded then it's a file path so resolve it\r\n\t\tasset_path = options.assets_base_path + asset_path\r\n\t}\r\n\r\n\treturn asset_path\r\n}\r\n\r\n// alias camel case for those who prefer it\r\nPlugin.urlLoaderParser = Plugin.url_loader_parser"]}