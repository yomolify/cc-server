'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.default_webpack_assets = default_webpack_assets;
exports.normalize_options = normalize_options;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

// returns a stub for webpack-assets.json if it doesn't exist yet
// (because node.js and webpack are being run in parallel in development mode)

function default_webpack_assets() {
	var webpack_assets = {
		javascript: {},
		styles: {}
	};

	return webpack_assets;
}

// adds missing fields, etc

function normalize_options(options) {
	// if no assets specified (for whatever reason), make it an empty array
	if (!options.assets) {
		options.assets = {}
		// throw new Error('You must specify "assets" parameter')
		;
	}

	// webpack-assets.json path, relative to the project base path
	options.webpack_assets_file_path = options.webpack_assets_file_path || 'webpack-assets.json';

	// generate names (if required) for each user defined asset type, normalize extensions
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = _getIterator(_Object$keys(options.assets)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var asset_type = _step.value;

			var description = options.assets[asset_type];

			// normalize extensions
			if (description.extension) {
				description.extensions = [description.extension];
			}

			// // set asset type name (if required), for readability
			// description.name = description.name || description.extensions.join(', ')
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator['return']) {
				_iterator['return']();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}
}
//# sourceMappingURL=common.js.map