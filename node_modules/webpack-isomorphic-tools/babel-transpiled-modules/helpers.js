// // if the variable is defined
'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.extend = extend;
exports.merge = merge;
exports.clone = clone;
exports.alias_camel_case = alias_camel_case;
var exists = function exists(what) {
	return typeof what !== 'undefined';
};

exports.exists = exists;
// extends the first object with
/* istanbul ignore next: some weird transpiled code, not testable */

function extend() {
	var _this = this,
	    _arguments = arguments;

	var _again = true;

	_function: while (_again) {
		_len = objects = _key = to = from = last = intermediary_result = _iteratorNormalCompletion = _didIteratorError = _iteratorError = undefined;
		_again = false;

		for (var _len = _arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {
			objects[_key] = _arguments[_key];
		}

		var to = objects[0];
		var from = objects[1];

		if (objects.length > 2) {
			var last = objects.pop();
			var intermediary_result = extend.apply(_this, objects);
			_this = undefined;
			_arguments = [intermediary_result, last];
			_again = true;
			continue _function;
		}

		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = _getIterator(_Object$keys(from)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var key = _step.value;

				if (typeof from[key] === 'object' && exists(to[key])) {
					to[key] = extend(to[key], from[key]);
				} else {
					to[key] = from[key];
				}
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator['return']) {
					_iterator['return']();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}

		return to;
	}
}

function merge() {
	var parameters = Array.prototype.slice.call(arguments, 0);
	parameters.unshift({});
	return extend.apply(this, parameters);
}

function clone(object) {
	return merge({}, object);
}

// creates camelCased aliases for all the keys of an object

function alias_camel_case(object) {
	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;

	try {
		for (var _iterator2 = _getIterator(_Object$keys(object)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
			var key = _step2.value;

			if (key.indexOf('_') >= 0) {
				var camel_cased_key = key.replace(/_(.)/g, function (match, group_1) {
					return group_1.toUpperCase();
				});

				if (!exists(object[camel_cased_key])) {
					object[camel_cased_key] = object[key];
				}
			}
		}
	} catch (err) {
		_didIteratorError2 = true;
		_iteratorError2 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion2 && _iterator2['return']) {
				_iterator2['return']();
			}
		} finally {
			if (_didIteratorError2) {
				throw _iteratorError2;
			}
		}
	}

	return object;
}
//# sourceMappingURL=helpers.js.map