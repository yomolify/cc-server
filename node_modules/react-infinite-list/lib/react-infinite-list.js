'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var isWebkit = /WebKit/.test(navigator && navigator.userAgent || '');

function isHighDensity() {
    return window.matchMedia && (window.matchMedia('only screen and (min-resolution: 124dpi), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dpcm)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)').matches) || window.devicePixelRatio && window.devicePixelRatio > 1.3;
}

var LoadingListItem = (function (_React$Component) {
    function LoadingListItem() {
        _classCallCheck(this, LoadingListItem);

        if (_React$Component != null) {
            _React$Component.apply(this, arguments);
        }
    }

    _inherits(LoadingListItem, _React$Component);

    _createClass(LoadingListItem, [{
        key: 'render',
        value: function render() {
            return _react2['default'].createElement(
                'div',
                { key: this.props.id, className: 'infinite-list-item item-loading' },
                'Loading...'
            );
        }
    }]);

    return LoadingListItem;
})(_react2['default'].Component);

var InfiniteListItem = (function (_React$Component2) {
    function InfiniteListItem() {
        _classCallCheck(this, InfiniteListItem);

        if (_React$Component2 != null) {
            _React$Component2.apply(this, arguments);
        }
    }

    _inherits(InfiniteListItem, _React$Component2);

    _createClass(InfiniteListItem, [{
        key: 'render',
        value: function render() {
            return _react2['default'].createElement(
                'div',
                { key: this.props.id, className: 'infinite-list-item' },
                this.props.title
            );
        }
    }]);

    return InfiniteListItem;
})(_react2['default'].Component);

InfiniteListItem.propTypes = {
    title: _react2['default'].PropTypes.string.isRequired,
    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]).isRequired
};

var InfiniteList = (function (_React$Component3) {
    function InfiniteList(props) {
        _classCallCheck(this, InfiniteList);

        _get(Object.getPrototypeOf(InfiniteList.prototype), 'constructor', this).call(this, props);

        this._scrollTimer = null;
        this.state = { renderedStart: 0 };
    }

    _inherits(InfiniteList, _React$Component3);

    _createClass(InfiniteList, [{
        key: 'onWheel',
        value: function onWheel() {
            this._scrolledByWheel = true;
        }
    }, {
        key: 'onScroll',
        value: function onScroll(e) {
            e.stopPropagation();

            // webkit when scrolling by wheel
            if (isWebkit && this._scrolledByWheel && !isHighDensity()) {
                this._scrolledByWheel = false;

                if (!this._scrollTimer) {
                    this._scrollTimer = setTimeout((function () {
                        this._scrollTimer = null;
                        this._calculateVisibleItems();
                    }).bind(this), 150);
                }

                return;
            }

            this._calculateVisibleItems();
        }
    }, {
        key: '_calculateVisibleItems',
        value: function _calculateVisibleItems() {
            var scrolledPx = _react2['default'].findDOMNode(this).scrollTop;

            var visibleStart = Math.floor(scrolledPx / this.props.itemHeight);

            if (visibleStart !== this.state.renderedStart) {
                this.setState({ renderedStart: visibleStart });
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var itemsChanged = this.props.items.length !== nextProps.items.length,
                heightChanged = this.props.height !== nextProps.height;

            // scroll to the top when searching
            if (itemsChanged) {
                _react2['default'].findDOMNode(this).scrollTop = 0;
            }

            if (itemsChanged || heightChanged) {
                this._calculateVisibleItems();
            }
        }
    }, {
        key: '_getItemComponent',
        value: function _getItemComponent(item) {
            var ListItemComponent = this.props.listItemClass;
            if (this.props.isItemLoading(item)) {
                ListItemComponent = this.props.loadingListItemClass;
            }

            return _react2['default'].createElement(ListItemComponent, _extends({ key: item.id }, item));
        }
    }, {
        key: '_getClassNames',
        value: function _getClassNames() {
            return (0, _classnames2['default'])('infinite-list', this.props.className);
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this = this;

            this.state.isInitialRender = false;

            var node = _react2['default'].findDOMNode(this);
            setTimeout(function () {
                node.scrollTop = _this.props.firstVisibleItemIndex * _this.props.itemHeight;
            }, 0);
        }
    }, {
        key: '_notifyWhenDataIsNeeded',
        value: function _notifyWhenDataIsNeeded(start, end) {
            var items = this.props.items;

            // Do not go over the end of the array
            if (end >= items.length) end = items.length - 1;

            var isItemLoading = this.props.isItemLoading;

            if (_.any(items.slice(start, end + 1), isItemLoading)) {
                this.props.onRangeChange(start, end);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var renderedStart = this.state.renderedStart;var _props = this.props;
            var items = _props.items;
            var height = _props.height;

            var itemHeight = _props.itemHeight;
            // the number one guarantees there is never empty space at the end of the list
            var numOfVisibleItems = Math.ceil(height / itemHeight) + 1;
            var totalHeight = items.length * itemHeight;

            var visibleItems = items.slice(renderedStart, renderedStart + numOfVisibleItems);
            var listItems = visibleItems.map(this._getItemComponent, this);

            var dataRangeEnd = Math.min(renderedStart + listItems.length, this.props.items.length);
            this.props.paging && this._notifyWhenDataIsNeeded(renderedStart, dataRangeEnd);

            var padding = this.state.renderedStart * itemHeight;
            // if maximum number of items on page is larger than actual number of items, maxPadding can be < 0
            var maxPadding = Math.max(0, totalHeight - numOfVisibleItems * itemHeight + itemHeight);
            var paddingTop = Math.min(maxPadding, padding);

            return _react2['default'].createElement(
                'div',
                { className: this._getClassNames(),
                    onWheel: this.onWheel.bind(this),
                    onScroll: this.onScroll.bind(this),
                    style: { height: this.props.height } },
                _react2['default'].createElement(
                    'div',
                    { className: 'infinite-list-content', style: { height: totalHeight - paddingTop, paddingTop: paddingTop } },
                    listItems
                )
            );
        }
    }]);

    return InfiniteList;
})(_react2['default'].Component);

exports['default'] = InfiniteList;

InfiniteList.propTypes = {
    items: _react2['default'].PropTypes.array.isRequired,
    height: _react2['default'].PropTypes.number.isRequired,
    itemHeight: _react2['default'].PropTypes.number.isRequired,
    isItemLoading: _react2['default'].PropTypes.func,
    listItemClass: _react2['default'].PropTypes.func,
    loadingListItemClass: _react2['default'].PropTypes.func,
    firstVisibleItemIndex: _react2['default'].PropTypes.number,
    paging: _react2['default'].PropTypes.bool

};

InfiniteList.defaultProps = {
    firstVisibleItemIndex: 0,
    isItemLoading: function isItemLoading() {
        return false;
    },
    paging: false,
    listItemClass: InfiniteListItem,
    lodingListItemClass: LoadingListItem
};
module.exports = exports['default'];
