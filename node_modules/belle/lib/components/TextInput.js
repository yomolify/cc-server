'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utilsCalculateTextareaHeight = require('../utils/calculate-textarea-height');

var _utilsCalculateTextareaHeight2 = _interopRequireDefault(_utilsCalculateTextareaHeight);

var _utilsInjectStyle = require('../utils/inject-style');

var _utilsUnionClassNames = require('../utils/union-class-names');

var _utilsUnionClassNames2 = _interopRequireDefault(_utilsUnionClassNames);

var _utilsHelpers = require('../utils/helpers');

var _styleTextInput = require('../style/text-input');

var _styleTextInput2 = _interopRequireDefault(_styleTextInput);

var newLineRegex = /[\r\n]/g;

/**
 * Returns an object with properties that are relevant for the TextInput's textarea.
 *
 * As the height of the textarea needs to be calculated valueLink can not be
 * passed down to the textarea, but made available through this component.
 */
function sanitizeChildProps(properties) {
  var childProps = (0, _utilsHelpers.omit)(properties, ['valueLink', 'onUpdate', 'onKeyDown', 'minHeight', 'maxHeight', 'minRows', 'maxRows', 'className', 'style', 'hoverStyle', 'focusStyle', 'disabledStyle', 'disabledHoverStyle']);
  if (typeof properties.valueLink === 'object') {
    childProps.value = properties.valueLink.value;
  }
  return childProps;
}

/**
 * Update hover & focus style for the speficied styleId.
 *
 * @param styleId {string} - a unique id that exists as class attribute in the DOM
 * @param properties {object} - the components properties optionally containing hoverStyle & focusStyle
 */
function updatePseudoClassStyle(styleId, properties) {
  var hoverStyle = (0, _utilsHelpers.extend)({}, _styleTextInput2['default'].hoverStyle, properties.hoverStyle);
  var focusStyle = (0, _utilsHelpers.extend)({}, _styleTextInput2['default'].focusStyle, properties.focusStyle);
  var disabledHoverStyle = (0, _utilsHelpers.extend)({}, _styleTextInput2['default'].disabledHoverStyle, properties.disabledHoverStyle);

  var styles = [{
    id: styleId,
    style: hoverStyle,
    pseudoClass: 'hover'
  }, {
    id: styleId,
    style: focusStyle,
    pseudoClass: 'focus'
  }, {
    id: styleId,
    style: disabledHoverStyle,
    pseudoClass: 'hover',
    disabled: true
  }];
  (0, _utilsInjectStyle.injectStyles)(styles);
}

/**
 * TextInput component with great UX like autogrowing & handling states
 *
 * Note on styling: Right now this component doen't allow to change style after
 * initialisation.
 *
 * Note on resizing:
 * If you fill a textarea only with spaces and the cursor reaches the right end
 * it won't break the line. This leads to unexpected behaviour for the automatic
 * resizing.
 *
 * This component was highly inspired by the great work from these guys
 * - Andrey Popp: https://github.com/andreypopp/react-textarea-autosize
 * - Eugene: https://gist.github.com/eugene1g/5dbaa7d35d0c7d5c2c56
 */

var TextInput = (function (_Component) {
  function TextInput(properties) {
    _classCallCheck(this, TextInput);

    _get(Object.getPrototypeOf(TextInput.prototype), 'constructor', this).call(this, properties);
    var inputValue = undefined;

    if ((0, _utilsHelpers.has)(properties, 'valueLink')) {
      inputValue = properties.valueLink.value;
    } else if ((0, _utilsHelpers.has)(properties, 'value')) {
      inputValue = properties.value;
    } else if ((0, _utilsHelpers.has)(properties, 'defaultValue')) {
      inputValue = properties.defaultValue;
    }

    this.state = {
      height: 'auto',
      inputValue: inputValue,
      textareaProps: sanitizeChildProps(properties)
    };
  }

  _inherits(TextInput, _Component);

  _createClass(TextInput, [{
    key: 'componentWillMount',

    /**
     * Generates the style-id & inject the focus & hover style.
     *
     * The style-id is based on React's unique DOM node id.
     */
    value: function componentWillMount() {
      var id = this._reactInternalInstance._rootNodeID.replace(/\./g, '-');
      this._styleId = 'style-id' + id;
      updatePseudoClassStyle(this._styleId, this.props);
    }
  }, {
    key: 'componentDidMount',

    /**
     * Right after the component go injected into the DOM it should be resized.
     */
    value: function componentDidMount() {
      this._triggerResize(this.state.inputValue);
    }
  }, {
    key: 'componentWillReceiveProps',

    /**
     * Update the properties passed to the textarea and resize as with the new
     * properties the height might have changed.
     */
    value: function componentWillReceiveProps(properties) {
      var inputValue = undefined;
      if ((0, _utilsHelpers.has)(properties, 'valueLink')) {
        inputValue = properties.valueLink.value;
      } else if ((0, _utilsHelpers.has)(properties, 'value')) {
        inputValue = properties.value;
      }

      this.setState({
        textareaProps: sanitizeChildProps(properties),
        inputValue: inputValue
      });
      (0, _utilsInjectStyle.removeStyle)(this._styleId);
      updatePseudoClassStyle(this._styleId, properties);
      this._triggerResize(inputValue);
    }
  }, {
    key: 'componentWillUnmount',

    /**
     * Remove a component's associated styles whenever it gets removed from the DOM.
     */
    value: function componentWillUnmount() {
      (0, _utilsInjectStyle.removeStyle)(this._styleId);
    }
  }, {
    key: '_onKeyDown',

    /**
     * Prevent any newline (except allowNewLine is active) and pass the event to
     * the onKeyDown property.
     *
     * This is an optimization to avoid adding a newline char & removing it right
     * away in the onUpdate callback.
     */
    value: function _onKeyDown(event) {
      if (!this.props.allowNewLine && event.key === 'Enter') {
        event.preventDefault();
      }

      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: '_onChange',

    /**
     * Update the height and calls the provided change callback for onUpdate
     * or valueLink.
     *
     * In addition newline characters are replaced by spaces in the textarea value
     * in case allowNewLine is set to false and newLine characters could be found.
     */
    value: function _onChange(event) {
      var value = event.target.value;

      if (!this.props.allowNewLine && value.match(newLineRegex) !== null) {
        value = value.replace(newLineRegex, ' ');
      }

      if ((0, _utilsHelpers.has)(this.props, 'valueLink')) {
        this.props.valueLink.requestChange(value);
      } else if ((0, _utilsHelpers.has)(this.props, 'defaultValue')) {
        this.setState({
          inputValue: value
        });
      }

      if (this.props.onUpdate) {
        this.props.onUpdate({ value: value });
      }
      this._triggerResize(value);
    }
  }, {
    key: '_triggerResize',

    /**
     * Calculate the height and store the new height in the state to trigger a render.
     */
    value: function _triggerResize(textareaValue) {
      var height = (0, _utilsCalculateTextareaHeight2['default'])(_react2['default'].findDOMNode(this), textareaValue, this.props.minRows, this.props.maxRows, this.props.minHeight, this.props.maxHeight);
      this.setState({ height: height });
    }
  }, {
    key: 'render',
    value: function render() {
      var textareaStyle = (0, _utilsHelpers.extend)({}, _styleTextInput2['default'].style, this.props.style);

      if (this.props.disabled) {
        textareaStyle = (0, _utilsHelpers.extend)(textareaStyle, _styleTextInput2['default'].disabledStyle, this.props.disabledStyle);
      }

      textareaStyle.height = this.state.height;
      return _react2['default'].createElement('textarea', _extends({ style: textareaStyle,
        value: this.state.inputValue,
        className: (0, _utilsUnionClassNames2['default'])(this.props.className, this._styleId),
        onChange: this._onChange.bind(this),
        onKeyDown: this._onKeyDown.bind(this)
      }, this.state.textareaProps));
    }
  }], [{
    key: 'displayName',
    value: 'Belle TextInput',
    enumerable: true
  }, {
    key: 'propTypes',
    value: {
      className: _react2['default'].PropTypes.string,
      minHeight: _react2['default'].PropTypes.number,
      maxHeight: _react2['default'].PropTypes.number,
      minRows: _react2['default'].PropTypes.number,
      maxRows: _react2['default'].PropTypes.number,
      style: _react2['default'].PropTypes.object,
      hoverStyle: _react2['default'].PropTypes.object,
      focusStyle: _react2['default'].PropTypes.object,
      allowNewLine: _react2['default'].PropTypes.bool,
      disabled: _react2['default'].PropTypes.bool,
      disabledStyle: _react2['default'].PropTypes.object,
      disabledHoverStyle: _react2['default'].PropTypes.object,
      onUpdate: _react2['default'].PropTypes.func,
      onKeyDown: _react2['default'].PropTypes.func,
      valueLink: _react2['default'].PropTypes.shape({
        value: _react2['default'].PropTypes.string.isRequired,
        requestChange: _react2['default'].PropTypes.func.isRequired
      })
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      allowNewLine: false,
      disabled: false
    },
    enumerable: true
  }]);

  return TextInput;
})(_react.Component);

exports['default'] = TextInput;
module.exports = exports['default'];