'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utilsHelpers = require('../utils/helpers');

var _styleButton = require('../style/button');

var _styleButton2 = _interopRequireDefault(_styleButton);

var _utilsUnionClassNames = require('../utils/union-class-names');

var _utilsUnionClassNames2 = _interopRequireDefault(_utilsUnionClassNames);

var _utilsInjectStyle = require('../utils/inject-style');

var _configButton = require('../config/button');

var _configButton2 = _interopRequireDefault(_configButton);

var buttonTypes = ['button', 'submit', 'reset'];

// Enable React Touch Events
_react2['default'].initializeTouchEvents && _react2['default'].initializeTouchEvents(true);

/**
 * Returns an object with properties that are relevant for the button element.
 *
 * In case a wrong or no type is defined the type of the child button will be
 * set to `button`.
 */
function sanitizeChildProps(properties) {
  return (0, _utilsHelpers.omit)(properties, ['className', 'style', 'hoverStyle', 'focusStyle', 'activeStyle', 'disabledStyle', 'disabledHoverStyle', 'primary', 'onTouchStart', 'onTouchEnd', 'onTouchCancel', 'onMouseDown', 'onFocus', 'onBlur']);
}

/**
 * Update hover, focus & active style for the speficied styleId.
 *
 * @param styleId {string} - a unique id that exists as class attribute in the DOM
 * @param properties {object} - the components properties optionally containing custom styles
 */
function updatePseudoClassStyle(styleId, properties, preventFocusStyleForTouchAndClick) {
  var baseHoverStyle = properties.primary ? _styleButton2['default'].primaryHoverStyle : _styleButton2['default'].hoverStyle;
  var baseActiveStyle = properties.primary ? _styleButton2['default'].primaryActiveStyle : _styleButton2['default'].activeStyle;
  var baseDisabledHoverStyle = properties.primary ? _styleButton2['default'].primaryDisabledHoverStyle : _styleButton2['default'].disabledHoverStyle;
  var hoverStyle = (0, _utilsHelpers.extend)({}, baseHoverStyle, properties.hoverStyle);
  var activeStyle = (0, _utilsHelpers.extend)({}, baseActiveStyle, properties.activeStyle);
  var disabledHoverStyle = (0, _utilsHelpers.extend)({}, baseDisabledHoverStyle, properties.disabledHoverStyle);

  var focusStyle = undefined;
  if (preventFocusStyleForTouchAndClick) {
    focusStyle = { outline: 0 };
  } else {
    var baseFocusStyle = properties.primary ? _styleButton2['default'].primaryFocusStyle : _styleButton2['default'].focusStyle;
    focusStyle = (0, _utilsHelpers.extend)({}, baseFocusStyle, properties.focusStyle);
  }

  var styles = [{
    id: styleId,
    style: hoverStyle,
    pseudoClass: 'hover'
  }, {
    id: styleId,
    style: activeStyle,
    pseudoClass: 'active'
  }, {
    id: styleId,
    style: disabledHoverStyle,
    pseudoClass: 'hover',
    disabled: true
  }, {
    id: styleId,
    style: focusStyle,
    pseudoClass: 'focus'
  }];

  (0, _utilsInjectStyle.injectStyles)(styles);
}

/**
 * Button component
 *
 * The button behaves exactly like a normal html button except:
 * - Once a user clicks on the button it will loose focus
 * - By default every button is of type="button" instead of "submit"
 */

var Button = (function (_Component) {
  function Button(properties) {
    _classCallCheck(this, Button);

    _get(Object.getPrototypeOf(Button.prototype), 'constructor', this).call(this, properties);

    this.preventFocusStyleForTouchAndClick = (0, _utilsHelpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _configButton2['default'].preventFocusStyleForTouchAndClick;

    this.state = {
      childProps: sanitizeChildProps(properties),
      // used for touch devices like iOS Chrome/Safari where the active
      // pseudoClass is not supported on touch
      active: false
    };
    // The focused attribute is used to apply the one-time focus animation.
    // As it is reset after every render it can't be set inside state as this
    // would trigger an endless loop.
    this.focused = false;

    // This used to determine if the one-time focus animation should be prevented.
    this.mouseDownOnButton = false;
  }

  _inherits(Button, _Component);

  _createClass(Button, [{
    key: 'componentWillMount',

    /**
     * Generates the style-id & inject the focus, hover & active style.
     *
     * The style-id is based on React's unique DOM node id.
     */
    value: function componentWillMount() {
      var id = this._reactInternalInstance._rootNodeID.replace(/\./g, '-');
      this.styleId = 'style-id' + id;
      updatePseudoClassStyle(this.styleId, this.props, this.preventFocusStyleForTouchAndClick);
    }
  }, {
    key: 'componentWillReceiveProps',

    /**
     * Update the childProps based on the updated properties of the button.
     */
    value: function componentWillReceiveProps(properties) {
      this.preventFocusStyleForTouchAndClick = (0, _utilsHelpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _configButton2['default'].preventFocusStyleForTouchAndClick;

      this.setState({
        childProps: sanitizeChildProps(properties)
      });
      (0, _utilsInjectStyle.removeStyle)(this.styleId);
      updatePseudoClassStyle(this.styleId, properties, this.preventFocusStyleForTouchAndClick);
    }
  }, {
    key: 'componentDidUpdate',

    /**
     * Deactivate the focused attribute in order to make sure the focus animation
     * only runs once when the component is focused on & not after re-rendering
     * e.g when the user clicks the button.
     */
    value: function componentDidUpdate() {
      this.focused = false;
      this.mouseDownOnButton = false;
    }
  }, {
    key: 'componentWillUnmount',

    /**
     * Remove a component's associated styles whenever it gets removed from the DOM.
     */
    value: function componentWillUnmount() {
      (0, _utilsInjectStyle.removeStyle)(this.styleId);
    }
  }, {
    key: '_onFocus',

    /**
     * Activate the focused attribute used to determine when to show the
     * one-time focus animation and trigger a render.
     */
    value: function _onFocus(event) {
      this.focused = true;
      this.forceUpdate();

      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: '_onBlur',

    /**
     * Deactivate the focused attribute used to determine when to show the
     * one-time focus animation and trigger a render.
     */
    value: function _onBlur(event) {
      this.focused = false;
      this.setState({ active: false });

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(event) {
      if (event.button === 0 && !this.props.disabled) {
        this.mouseDownOnButton = true;
      }

      if (this.props.onMouseDown) {
        this.props.onMouseDown(event);
      }
    }
  }, {
    key: '_onTouchStart',

    /**
     * Updates the button to be pressed.
     */
    value: function _onTouchStart(event) {
      if (!this.props.disabled && event.touches.length === 1) {
        this.setState({ active: true });
      }

      if (this.props.onTouchStart) {
        this.props.onTouchStart(event);
      }
    }
  }, {
    key: '_onTouchEnd',

    /**
     * Updates the button to be release.
     */
    value: function _onTouchEnd(event) {
      this.setState({ active: false });

      if (this.props.onTouchEnd) {
        this.props.onTouchEnd(event);
      }
    }
  }, {
    key: '_onTouchCancel',

    /**
     * Updates the button to be release.
     */
    value: function _onTouchCancel(event) {
      this.setState({ active: false });

      if (this.props.onTouchEnd) {
        this.props.onTouchEnd(event);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var baseStyle = this.props.primary ? _styleButton2['default'].primaryStyle : _styleButton2['default'].style;
      var baseButtonStyle = (0, _utilsHelpers.extend)({}, baseStyle, this.props.style);

      var buttonStyle = undefined;
      if (this.props.disabled) {
        if (this.props.primary) {
          buttonStyle = (0, _utilsHelpers.extend)({}, baseButtonStyle, _styleButton2['default'].primaryDisabledStyle, this.props.disabledStyle);
        } else {
          buttonStyle = (0, _utilsHelpers.extend)({}, baseButtonStyle, _styleButton2['default'].disabledStyle, this.props.disabledStyle);
        }
      } else {
        if (this.state.active) {
          var baseActiveStyle = this.props.primary ? _styleButton2['default'].primaryActiveStyle : _styleButton2['default'].activeStyle;
          buttonStyle = (0, _utilsHelpers.extend)({}, baseButtonStyle, baseActiveStyle, this.props.activeStyle);
        } else if (this.focused && !this.state.active && !this.mouseDownOnButton && this.preventFocusStyleForTouchAndClick) {
          var baseFocusStyle = this.props.primary ? _styleButton2['default'].primaryFocusStyle : _styleButton2['default'].focusStyle;
          buttonStyle = (0, _utilsHelpers.extend)({}, baseButtonStyle, baseFocusStyle, this.props.focusStyle);
        } else {
          buttonStyle = baseButtonStyle;
        }
      }

      return _react2['default'].createElement(
        'button',
        _extends({ style: buttonStyle,
          className: (0, _utilsUnionClassNames2['default'])(this.props.className, this.styleId),
          onTouchStart: this._onTouchStart.bind(this),
          onTouchEnd: this._onTouchEnd.bind(this),
          onTouchCancel: this._onTouchCancel.bind(this),
          onFocus: this._onFocus.bind(this),
          onBlur: this._onBlur.bind(this),
          onMouseDown: this._onMouseDown.bind(this)
        }, this.state.childProps),
        this.props.children
      );
    }
  }], [{
    key: 'displayName',
    value: 'Belle Button',
    enumerable: true
  }, {
    key: 'propTypes',
    value: {
      activeStyle: _react2['default'].PropTypes.object,
      children: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.node), _react2['default'].PropTypes.node]),
      className: _react2['default'].PropTypes.string,
      disabled: _react2['default'].PropTypes.bool,
      type: _react2['default'].PropTypes.oneOf(buttonTypes),
      style: _react2['default'].PropTypes.object,
      focusStyle: _react2['default'].PropTypes.object,
      hoverStyle: _react2['default'].PropTypes.object,
      disabledStyle: _react2['default'].PropTypes.object,
      disabledHoverStyle: _react2['default'].PropTypes.object,
      onTouchStart: _react2['default'].PropTypes.func,
      onTouchEnd: _react2['default'].PropTypes.func,
      onTouchCancel: _react2['default'].PropTypes.func,
      onMouseDown: _react2['default'].PropTypes.func,
      onFocus: _react2['default'].PropTypes.func,
      onBlur: _react2['default'].PropTypes.func,
      preventFocusStyleForTouchAndClick: _react2['default'].PropTypes.bool,
      primary: _react2['default'].PropTypes.bool
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      primary: false,
      disabled: false,
      type: 'button'
    },
    enumerable: true
  }]);

  return Button;
})(_react.Component);

exports['default'] = Button;
module.exports = exports['default'];