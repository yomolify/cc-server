'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _reactAddons = require('react/addons');

var _reactAddons2 = _interopRequireDefault(_reactAddons);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Transition = _reactAddons2['default'].addons.CSSTransitionGroup;
var TransitionPortal = _reactAddons2['default'].createClass({
	displayName: 'TransitionPortal',
	portalElement: null,
	render: function render() {
		return null;
	},
	componentDidMount: function componentDidMount() {
		var p = document.createElement('div');
		document.body.appendChild(p);
		this.portalElement = p;
		this.componentDidUpdate();
	},
	componentWillUnmount: function componentWillUnmount() {
		document.body.removeChild(this.portalElement);
	},
	componentDidUpdate: function componentDidUpdate() {
		_reactAddons2['default'].render(_reactAddons2['default'].createElement(
			Transition,
			this.props,
			this.props.children
		), this.portalElement);
	}
});

module.exports = _reactAddons2['default'].createClass({
	displayName: 'Modal',
	propTypes: {
		backdropClosesModal: _reactAddons2['default'].PropTypes.bool,
		className: _reactAddons2['default'].PropTypes.string,
		isOpen: _reactAddons2['default'].PropTypes.bool,
		onCancel: _reactAddons2['default'].PropTypes.func
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		if (nextProps.isOpen) {
			window.addEventListener('keydown', this.handleKeyDown);
			document.body.style.overflow = 'hidden';
		} else {
			window.removeEventListener('keydown', this.handleKeyDown);
			document.body.style.overflow = null;
		}
	},

	handleKeyDown: function handleKeyDown(event) {
		if (event.keyCode === 27) {
			this.props.onCancel();
		}
	},
	handleModalClick: function handleModalClick(event) {
		if (event.target.dataset.modal) this.props.onCancel();
	},
	renderDialog: function renderDialog() {
		if (!this.props.isOpen) return;

		return _reactAddons2['default'].createElement(
			'div',
			{ className: 'Modal-dialog' },
			_reactAddons2['default'].createElement(
				'div',
				{ className: 'Modal-content' },
				this.props.children
			)
		);
	},
	renderBackdrop: function renderBackdrop() {
		if (!this.props.isOpen) return;

		return _reactAddons2['default'].createElement('div', { className: 'Modal-backdrop', onClick: this.props.backdropClosesModal ? this.props.onCancel : null });
	},
	render: function render() {
		var className = (0, _classnames2['default'])('Modal', {
			'is-open': this.props.isOpen
		}, this.props.className);

		var props = (0, _blacklist2['default'])(this.props, 'backdropClosesModal', 'className', 'isOpen', 'onCancel');

		return _reactAddons2['default'].createElement(
			'div',
			null,
			_reactAddons2['default'].createElement(
				TransitionPortal,
				_extends({}, props, { 'data-modal': 'true', className: className, onClick: this.handleModalClick, transitionName: 'Modal-dialog', component: 'div' }),
				this.renderDialog()
			),
			_reactAddons2['default'].createElement(
				TransitionPortal,
				{ transitionName: 'Modal-background', component: 'div' },
				this.renderBackdrop()
			)
		);
	}
});

// expose the children to the top level export
module.exports.Body = require('./ModalBody');
module.exports.Footer = require('./ModalFooter');
module.exports.Header = require('./ModalHeader');